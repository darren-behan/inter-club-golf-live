[{"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/index.js":"1","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/App.js":"2","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/reportWebVitals.js":"3","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/PageNotFound.js":"4","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/API.js":"5","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Home.js":"6","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Login.js":"7","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/DataAreaContext.js":"8","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Header/index.js":"9","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Profile.js":"10","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Cards/index.js":"11","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Slider/index.js":"12","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Match.js":"13","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Footer/index.js":"14","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/CreateMatch.js":"15","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/Lib.js":"16","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Signup.js":"17","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/PostMatchForm/index.js":"18","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/UpdateModal/index.js":"19","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/DeleteModal/index.js":"20","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/CreateMatchModal/index.js":"21","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/services/LocalStorage/LocalStorage.service.js":"22","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/services/SessionStorage/SessionStorage.service.js":"23","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/BurgerMenuIcon/index.js":"24","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/SideBar/index.js":"25","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/UserAuthModal/index.js":"26","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/UpdateMatchForm/index.js":"27","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Competitions.js":"28","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/ComboBox/index.js":"29","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Wrapper/index.js":"30","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/FiltersOffCanvas/index.js":"31","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/About.js":"32","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/AddCollaboratorsModal/index.js":"33","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/AddCollaboratorsForm/index.js":"34","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/SkeletonBuildingBlocks/SkeletonBuildingBlocks.tsx":"35","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/ReauthenticateUserModal/index.js":"36"},{"size":1173,"mtime":1647397919557,"results":"37","hashOfConfig":"38"},{"size":8658,"mtime":1651474499002,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1618193579027,"results":"40","hashOfConfig":"38"},{"size":349,"mtime":1620866088424,"results":"41","hashOfConfig":"38"},{"size":1904,"mtime":1650536549819,"results":"42","hashOfConfig":"38"},{"size":3959,"mtime":1649388388326,"results":"43","hashOfConfig":"38"},{"size":6600,"mtime":1647397919558,"results":"44","hashOfConfig":"38"},{"size":111,"mtime":1618193579028,"results":"45","hashOfConfig":"38"},{"size":2041,"mtime":1650511292909,"results":"46","hashOfConfig":"38"},{"size":22116,"mtime":1652337461853,"results":"47","hashOfConfig":"38"},{"size":4191,"mtime":1647485177009,"results":"48","hashOfConfig":"38"},{"size":1395,"mtime":1646352587137,"results":"49","hashOfConfig":"38"},{"size":13893,"mtime":1649385226388,"results":"50","hashOfConfig":"38"},{"size":2807,"mtime":1650504763348,"results":"51","hashOfConfig":"38"},{"size":410,"mtime":1650505367752,"results":"52","hashOfConfig":"38"},{"size":858,"mtime":1631528906935,"results":"53","hashOfConfig":"38"},{"size":6560,"mtime":1647397919560,"results":"54","hashOfConfig":"38"},{"size":17693,"mtime":1633245108796,"results":"55","hashOfConfig":"38"},{"size":5291,"mtime":1647490106976,"results":"56","hashOfConfig":"38"},{"size":2294,"mtime":1627295907066,"results":"57","hashOfConfig":"38"},{"size":1344,"mtime":1626515627783,"results":"58","hashOfConfig":"38"},{"size":296,"mtime":1625565531356,"results":"59","hashOfConfig":"38"},{"size":218,"mtime":1625564997041,"results":"60","hashOfConfig":"61"},{"size":1332,"mtime":1627101128354,"results":"62","hashOfConfig":"38"},{"size":5028,"mtime":1651474752648,"results":"63","hashOfConfig":"38"},{"size":1138,"mtime":1625955503973,"results":"64","hashOfConfig":"38"},{"size":20882,"mtime":1647490168094,"results":"65","hashOfConfig":"38"},{"size":12833,"mtime":1649388496506,"results":"66","hashOfConfig":"38"},{"size":1333,"mtime":1627624326399,"results":"67","hashOfConfig":"38"},{"size":194,"mtime":1650449082304,"results":"68","hashOfConfig":"38"},{"size":15868,"mtime":1650526980460,"results":"69","hashOfConfig":"38"},{"size":1791,"mtime":1627622526880,"results":"70","hashOfConfig":"38"},{"size":7130,"mtime":1647493562376,"results":"71","hashOfConfig":"38"},{"size":4532,"mtime":1647492874319,"results":"72","hashOfConfig":"38"},{"size":3106,"mtime":1649384853627,"results":"73","hashOfConfig":"38"},{"size":4227,"mtime":1652337289242,"results":"74","hashOfConfig":"38"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"f4128f",{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"77"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"77"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"77"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"77"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16h9qtu",{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"77"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"77"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"77"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"77"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"77"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"77"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"77"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"77"},"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/index.js",[],["166","167"],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/App.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/reportWebVitals.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/PageNotFound.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/API.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Home.js",["168","169"],"import React, { useContext } from 'react';\nimport DataAreaContext from '../utils/DataAreaContext';\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport ComboBox from '../components/ComboBox';\nimport Slider from '../components/Slider';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { ShinyBlock, Space } from '../components/SkeletonBuildingBlocks/SkeletonBuildingBlocks';\nimport { IsEmpty } from \"react-lodash\";\nimport AdSense from 'react-adsense';\nimport { isEmpty } from 'lodash';\n\nfunction Home() {\n  const { appMatchesOnLoad } = useContext(DataAreaContext);\n  const RowStyles = {\n      // height: \"100vh\",\n      margin: 0\n  };\n  let completedMatches = [];\n  let inProgressMatches = [];\n  let notStartedMatches = [];\n\n  if (appMatchesOnLoad.length > 0) {\n    appMatchesOnLoad.map((match) => {\n      if (match.matchStatus === 'complete') {\n        completedMatches.push(match)\n      }\n\n      if (match.matchStatus === 'in progress') {\n        inProgressMatches.push(match)\n      }\n\n      if (match.matchStatus === 'not started') {\n        notStartedMatches.push(match)\n      }\n    })\n  }\n\n  return (\n    <>\n    <Header />\n    <Container className=\"px-0\" style={{ height: \"85vh\"}}>\n      <Row style={ RowStyles }>\n        <Col className=\"mt-4 px-0\" xs={{ span: 12 }}>\n          <p className=\"mx-3 mx-sm-0\" style={{ fontSize: \"2rem\", fontWeight: \"900\" }}>\n            Support your\n            <br />\n            club on the\n            <br />\n            inter club\n            <br />\n            stage\n          </p>\n          <p className=\"mx-3 mx-sm-0\" style={{ fontSize: \"1rem\" }}>\n            Know your clubs upcoming, in progress &amp; completed inter club matches across various golf tournaments.\n          </p>\n          <br />\n          <div className=\"mx-3 mx-sm-0\">\n            <ComboBox />\n          </div>\n        </Col>\n      </Row>\n    </Container>\n    {/* <Row className=\"ads-row mx-3\">\n      <AdSense.Google\n        client={process.env.REACT_APP_GOOGLE_ADSENSE}\n        slot='4238602370'\n        style={{ display: 'block' }}\n        format='auto'\n        responsive='true'\n        layoutKey='-gw-1+2a-9x+5c'\n      />\n    </Row> */}\n    <IsEmpty\n      value={appMatchesOnLoad}\n      yes={() =>\n        <>\n        <div className=\"container px-3 py-5\">\n          <br />\n          <br />\n          <ShinyBlock height=\"1.5rem\" />\n          <Space height=\"1rem\" />\n          <ShinyBlock height=\"12rem\" />\n          <Space height=\"1rem\" />\n          <ShinyBlock height=\"12rem\" />\n          <Space height=\"1rem\" />\n        </div>\n        <br />\n        </>\n      }\n      no={() => (\n        <>\n        <div className=\"container px-4 py-5\">\n          <h3>Completed</h3>\n          {\n            !isEmpty(completedMatches) ?\n              <Slider matches={ completedMatches } />\n            :\n              <div style={{ textAlign: \"left\" }}>\n                <br />\n                <br />\n                <h5>There are no finalized matches</h5>\n              </div>\n          }\n        </div>\n        <div className=\"container px-4 py-5\">\n          <h3>In Progress</h3>\n          {\n            !isEmpty(inProgressMatches) ?\n              <Slider matches={ inProgressMatches } />\n            :\n              <div style={{ textAlign: \"left\" }}>\n                <br />\n                <br />\n                <h5>There are currently no matches in progress</h5>\n              </div>\n          }\n        </div>\n        <div className=\"container px-4 py-5\">\n          <h3>Upcoming Matches</h3>\n          {\n            !isEmpty(notStartedMatches) ?\n              <Slider matches={ notStartedMatches } />\n            :\n              <div style={{ textAlign: \"left\" }}>\n                <br />\n                <br />\n                <h5>There are currently no upcoming matches</h5>\n              </div>\n          }\n        </div>\n        </>\n      )}\n    />\n    <Footer />\n    </>\n  );\n}\n\nexport default Home;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Login.js",["170"],"import React, { useContext, useState, useEffect } from 'react';\nimport DataAreaContext from '../utils/DataAreaContext';\nimport LocalStorage from '../services/LocalStorage/LocalStorage.service';\nimport UserAuthModal from \"../components/Modals/UserAuthModal\";\nimport Header from \"../components/Header\";\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: 8,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center'\n\t},\n\tavatar: {\n\t\tmargin: 1,\n\t\tbackgroundColor: 'grey'\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: 1\n\t},\n\tsubmit: {\n\t\tmargin: 3\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogess: {\n\t\tposition: 'absolute'\n\t}\n});\n\nfunction Login() {\n\tlet history = useHistory();\n\tconst { isAuthenticated, setIsAuthenticated, loginDataObj, setLoginDataObj, setUserDataObj, setUserAuthResponse, setUserAuthModalShow, userAuthModalShow, form, setForm } = useContext(DataAreaContext);\n\tconst [loading, setLoading] = useState( false );\n\tconst classes = styles();\n\t\n\t// useEffect is listening on load of page\n  // If isAuthenticated changes to true, the user is navigated to the home page \n  useEffect(() => {\n    if(isAuthenticated) {\n      history.push('/');\n    };\n\t}, [isAuthenticated]);\n\n  // Handles updating component state when the user types into the input field\n  const handleInputChange = (event) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\t\tsetLoginDataObj({...loginDataObj, [name]: value})\n  };\n\n\tconst actionCodeSettings = {\n\t\turl: 'https://inter-club-golf-live.web.app/login',\n\t\thandleCodeInApp: false\n\t};\n\n\tconst handleLoginSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tsetLoading(true);\n\n\t\tfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n\t\t.then(() => {\n\t\t\treturn firebase.auth().signInWithEmailAndPassword(loginDataObj.email, loginDataObj.password);\n\t\t})\n\t\t.then((response) => {\n      if (response.user.emailVerified) {\n\t\t\t\tsetIsAuthenticated(true);\n\t\t\t\tsetUserDataObj(response.user);\n\t\t\t\tLocalStorage.set('AuthToken', `Bearer ${response.user.multiFactor.user.accessToken}`);\n\t\t\t\tsetLoading(false);\n\t\t\t} else {\n\t\t\t\tresponse.user.sendEmailVerification(actionCodeSettings);\n\t\t\t\tsetUserAuthResponse({\n\t\t\t\t\tmessage: \"Your email is not verified. A verification email has been sent to your email address. Please verify your email to continue to login.\",\n\t\t\t\t\tstatus: 200\n\t\t\t\t});\n\t\t\t\tsetLoginDataObj({});\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetUserAuthModalShow(true);\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetUserAuthResponse({\n\t\t\t\tmessage: error.message,\n\t\t\t\tstatus: 400\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tsetUserAuthModalShow(true);\n\t\t});\n\t};\n\n\tconst handleResetPasswordSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tsetLoading(true);\n\t\tfirebase.auth().sendPasswordResetEmail(loginDataObj.email, actionCodeSettings)\n\t\t.then(() => {\n\t\t\tsetUserAuthResponse({\n\t\t\t\tmessage: \"A password reset email has been sent.\",\n\t\t\t\tstatus: 200\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tsetUserAuthModalShow(true);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetUserAuthResponse({\n\t\t\t\tmessage: error.message,\n\t\t\t\tstatus: 400\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tsetUserAuthModalShow(true);\n\t\t});\n\t};\n\n\treturn (\n    <>\n\t\t\t<UserAuthModal\n\t\t\t\tshow={userAuthModalShow}\n\t\t\t\tonHide={() => setUserAuthModalShow(false)} \n\t\t\t/>\n    \t<Header />\n\t\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t\t<CssBaseline />\n\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t{(form === true) ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tvalue={loginDataObj.email}\n\t\t\t\t\t\t\t\tautoComplete=\"email\"\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\t\tvalue={loginDataObj.password}\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t\t\tautoComplete=\"current-password\"\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\t\t\tonClick={(e) => handleLoginSubmit(e)}\n\t\t\t\t\t\t\t\tdisabled={loading || !loginDataObj.email || !loginDataObj.password}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSign In\n\t\t\t\t\t\t\t\t{loading && <CircularProgress size={30} className={classes.progess} />}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t\t<Link href=\"signup\" variant=\"body2\">\n\t\t\t\t\t\t\t\t\t\t{\"Don't have an account? Sign Up\"}\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t\t<Link onClick={() => {setForm(false)}} variant=\"body2\">\n\t\t\t\t\t\t\t\t\t\t{\"Forgot your password?\"}\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\t\t\tReset password\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\t\tlabel=\"Email address\"\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tautoComplete=\"email\"\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\t\t\tonClick={(e) => handleResetPasswordSubmit(e)}\n\t\t\t\t\t\t\t\tdisabled={loading || !loginDataObj.email}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tReset password\n\t\t\t\t\t\t\t\t{loading && <CircularProgress size={30} className={classes.progess} />}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t\t<Link onClick={() => {setForm(true)}} variant=\"body2\">\n\t\t\t\t\t\t\t\t\t\t{\"Sign in\"}\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t</>\n\t);\n}\n\nexport default Login;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/DataAreaContext.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Header/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Profile.js",["171","172","173","174","175"],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Cards/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Slider/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Match.js",["176","177"],"import React, { useContext, useEffect } from 'react';\nimport API from '../utils/API';\nimport DataAreaContext from '../utils/DataAreaContext';\nimport Lib from '../utils/Lib';\nimport { Map } from \"react-lodash\";\nimport { useParams } from \"react-router-dom\";\nimport { IsEmpty } from \"react-lodash\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport DeleteModal from \"../components/Modals/DeleteModal\";\nimport UpdateModal from \"../components/Modals/UpdateModal\";\nimport AddCollaboratorsModal from \"../components/Modals/AddCollaboratorsModal\";\nimport { Container, Row, Table, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { ShinyBlock, Space } from '../components/SkeletonBuildingBlocks/SkeletonBuildingBlocks';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nlet isEmpty = require('lodash.isempty');\n\nfunction Match() {\n  const { match, setMatchObj, userDataObj, isAuthenticated, deleteModalShow, setDeleteModalShow, timeZone, updateModalShow, setUpdateModalShow, setUpdateMatchObj, addCollaboratorsModalShow, setAddCollaboratorsModalShow } = useContext(DataAreaContext);\n  let { id } = useParams();\n  let individualMatches;\n  let sortedIndividualMatches;\n\n  useEffect(() => {\n    if (!isEmpty(match)) {\n      setUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n    } else {\n      getMatchOnLoad();\n    }\n  }, []);\n\n  async function getMatchOnLoad() {\n    await API.getMatch(id)\n      .then(res => {\n        setMatchObj(res.data);\n      })\n      .catch(err => console.log(err));\n  }\n\n  if (!isEmpty(match)) {\n    individualMatches = match.individualMatch;\n    sortedIndividualMatches = individualMatches.sort(function(a, b) {\n      return a.individualMatchId - b.individualMatchId;\n    });\n  }\n\n  const getScore = () => {\n    if (match.teamOneScore > match.teamTwoScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.teamOneScore} - {match.teamTwoScore}\n          <span style={{ float: 'right', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else if (match.teamOneScore < match.teamTwoScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.teamOneScore} - {match.teamTwoScore}\n          <span style={{ float: 'right' }}><FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          A/S\n        </div>\n      )\n    }\n  }\n\n  const getIndividualMatchScore = (match) => {\n    if (match.homeMatchScore > match.awayMatchScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.homeMatchScore} up\n          <span style={{ float: 'right', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else if (match.homeMatchScore < match.awayMatchScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.awayMatchScore} up<span style={{ float: 'right' }}>\n          <FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          A/S\n        </div>\n      )\n    }\n  }\n\n  const getHomePlayerNames = (singleMatch) => {\n    if (match.singlePlayer === true) {\n      return (\n        singleMatch.homeMatchPlayerAName !== \"empty\" ? (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {Lib.capitalize(singleMatch.homeMatchPlayerAName)}\n          </p>\n        ) : (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {match.teamOneName}\n          </p>\n        )\n      )\n    } else {\n      return (\n        singleMatch.homeMatchPlayerAName !== \"empty\" && singleMatch.homeMatchPlayerBName !== \"empty\" ? (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n          {Lib.capitalize(singleMatch.homeMatchPlayerAName)}\n          <br />\n          {Lib.capitalize(singleMatch.homeMatchPlayerBName)}\n          </p>\n        ) : (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {Lib.capitalize(match.teamOneName)}\n          </p>\n        )\n      )\n    }\n  }\n\n  const getAwayPlayerNames = (singleMatch) => {\n    if (match.singlePlayer === true) {\n      return (\n        singleMatch.awayMatchPlayerAName !== \"empty\" ? (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {Lib.capitalize(singleMatch.awayMatchPlayerAName)}\n          </p>\n        ) : (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {Lib.capitalize(match.teamTwoName)}\n          </p>\n        )\n      )\n    } else {\n      return (\n        singleMatch.awayMatchPlayerAName !== \"empty\" && singleMatch.awayMatchPlayerBName !== \"empty\" ? (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n          {Lib.capitalize(singleMatch.awayMatchPlayerAName)}\n          <br />\n          {Lib.capitalize(singleMatch.awayMatchPlayerBName)}\n          </p>\n        ) : (\n          <p style={{ margin: \"0px\", alignItems: \"center\", fontSize: \"0.8rem\" }}>\n            {Lib.capitalize(match.teamTwoName)}\n          </p>\n        )\n      )\n    }\n  }\n\n  return (\n    <IsEmpty\n      value={match}\n      yes={() =>\n        <Container fluid={ true } style={{ padding: '0 0 70px 0' }}>\n          <Header />\n          <Container>\n            <Row>\n              <div>\n                <br />\n                <br />\n                <ShinyBlock height=\"1.5rem\" />\n                <Space height=\"1rem\" />\n                <ShinyBlock height=\"12rem\" />\n                <Space height=\"1rem\" />\n                <ShinyBlock height=\"12rem\" />\n                <Space height=\"1rem\" />\n              </div>\n            </Row>\n          </Container>\n        </Container>\n      }\n      no={() => (\n        <>\n        <DeleteModal\n          show={deleteModalShow}\n          onHide={() => setDeleteModalShow(false)} \n        />\n        <UpdateModal\n          show={updateModalShow}\n          onHide={() => setUpdateModalShow(false)} \n        />\n        <AddCollaboratorsModal\n          show={addCollaboratorsModalShow}\n          onHide={() => setAddCollaboratorsModalShow(false)} \n        />\n        <Header />\n        <Container>\n          <Row style={{ marginTop: '10px'}}>\n            <Table size=\"sm\" className=\"caption-top\" style={{ tableLayout: 'fixed' }}>\n              <caption style={{ color: '#0a66c2', fontWeight: '900', textAlign: 'center' }}>Match Score</caption>\n              <tbody>\n                <tr key={match.matchId}>\n                  <td style={{ background: '#ffffff' }}>{Lib.capitalize(match.teamOneName)}</td>\n                  <td style={{ background: '#0a66c2' }}>\n                    {getScore()}\n                  </td>\n                  <td style={{ background: '#ffffff' }}>{Lib.capitalize(match.teamTwoName)}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Row>\n          <Row>\n            <div style={{ textAlign: 'left' }}>\n              <h6>Competition:&nbsp;<span style={{ color: \"#0a66c2\" }}>{ Lib.capitalize(match.competitionName) }</span></h6>\n              <h6>Competition Round:&nbsp;<span style={{ color: \"#0a66c2\" }}>{ Lib.capitalize(match.competitionRound.round) }</span></h6>\n              <h6>Match Status:&nbsp;<span style={{ color: \"#0a66c2\" }}>{ Lib.capitalize(match.matchStatus) }</span></h6>\n              <h6>\n                Match Date:&nbsp;\n                <span style={{ color: \"#0a66c2\" }}>\n                  <Moment tz={ timeZone } format=\"DD/MM/YYYY\">\n                    { match.matchDateTime }\n                  </Moment>\n                </span>\n              </h6>\n              <h6>\n                Tee Time:&nbsp;\n                <span style={{ color: \"#0a66c2\" }}>\n                  <Moment tz={ timeZone } format=\"HH:mm z\">\n                    { match.matchDateTime }\n                  </Moment>\n                </span>\n              </h6>\n            </div>\n          </Row>\n          <br />\n          <Row>\n            <Table size=\"sm\" className=\"caption-top\" style={{ tableLayout: 'fixed' }}>\n              <caption style={{ color: '#0a66c2', fontWeight: '900', textAlign: 'center' }}>Individual Match Scores</caption>\n              <thead>\n                <tr>\n                  <th>{ Lib.capitalize(match.teamOneName) }</th>\n                  <th>Score</th>\n                  <th>{ Lib.capitalize(match.teamTwoName) }</th>\n                </tr>\n              </thead>\n              <tbody>\n                <Map collection={sortedIndividualMatches}\n                  iteratee={singleMatch =>\n                    <>\n                    <tr>\n                      <td colSpan=\"3\" style={{ background: \"#ffffff\", textAlign: \"left\" }}>\n                        {singleMatch.matchDestination === \"empty\" ?\n                          <>\n                          Match {singleMatch.individualMatchId} destination not provided\n                          </>\n                        :\n                          <>\n                          Match {singleMatch.individualMatchId} contested in&nbsp;\n                          <span style={{ color: \"#0a66c2\", fontWeight: \"500\" }}>\n                            {Lib.capitalize(singleMatch.matchDestination)}\n                          </span>\n                          </>\n                        }\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>{getHomePlayerNames(singleMatch)}</td>\n                      <td style={{ background: '#0a66c2' }}>\n                        {getIndividualMatchScore(singleMatch)}\n                      </td>\n                      <td>{getAwayPlayerNames(singleMatch)}</td>\n                    </tr>\n                    <tr>\n                      <td colSpan=\"3\">Holes played <span style={{ color: \"#0a66c2\", fontWeight: \"500\" }}>{singleMatch.holesPlayed}</span></td>\n                    </tr>\n                    <br />\n                    </>\n                  }\n                />\n              </tbody>\n            </Table>\n          </Row>\n          {isAuthenticated ? (\n            <>\n              {(match.createdByUid === userDataObj.uid) ?\n                <>\n                <Row className=\"d-grid gap-2\">\n                  <Button\n                    variant=\"success\"\n                    size=\"sm\"\n                    className=\"update-match\"\n                    onClick={() =>\n                      setUpdateModalShow(true)\n                    }\n                  >\n                    Update\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    size=\"sm\"\n                    className=\"add-match-collaborators\"\n                    onClick={() =>\n                      setAddCollaboratorsModalShow(true)\n                    }\n                  >\n                    Add Collaborators\n                  </Button>\n                  <Button\n                    variant=\"danger\"\n                    size=\"sm\"\n                    className=\"delete-match\"\n                    onClick={() =>\n                      setDeleteModalShow(true)\n                    }\n                  >\n                    Delete\n                  </Button>\n                </Row>\n                <br />\n                </>\n                : (match.hasOwnProperty(\"collaborators\") && !isEmpty(match.collaborators)) ?\n                  match.collaborators.map(collaborator => {\n                    if (collaborator.userId === userDataObj.uid) {\n                      return (\n                        <>\n                        <Row className=\"d-grid gap-2\">\n                          <Button\n                            variant=\"success\"\n                            size=\"sm\"\n                            className=\"update-match\"\n                            onClick={() =>\n                              setUpdateModalShow(true)\n                            }\n                          >\n                            Update\n                          </Button>\n                        </Row>\n                        <br />\n                        </>\n                      )\n                    }\n                  })\n                :\n                null\n              }\n            </>\n          ) : (\n            null\n          )}\n          <Row>\n            <h6>\n              Last updated on&nbsp;\n              <span style={{ color: \"#0a66c2\" }}>\n                <Moment tz={ timeZone } format=\"DD/MM/YYYY\">\n                  { match.updatedAt }\n                </Moment>\n              </span>\n              &nbsp;at&nbsp;\n              <span style={{ color: \"#0a66c2\" }}>\n                <Moment tz={ timeZone } format=\"HH:mm\">\n                  { match.updatedAt }\n                </Moment>\n              </span>\n            </h6>\n          </Row>\n          <br />\n        </Container>\n        <Footer />\n        </>\n      )}\n    />\n  )\n}\n\nexport default Match;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Footer/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/CreateMatch.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/utils/Lib.js",["178"],"export default {\n  // Logs in a user\n  capitalize: function(str) {\n    return [...str].reduce(\n      (s, c, i, a) => s + (i === 0 || a[i - 1] === ' ' ? c.toUpperCase() : c),\n      ''\n    )\n  },\n  removeByAttr: function(arr, attr, value){\n    var i = arr.length;\n    while(i--){\n       if( arr[i] \n           && arr[i].hasOwnProperty(attr) \n           && (arguments.length > 2 && arr[i][attr] === value ) ){ \n           arr.splice(i,1);\n       }\n    }\n    return arr;\n  },\n  eliminateDuplicates: function(arr) {\n    var i,\n        len = arr.length,\n        out = [],\n        obj = {};\n  \n    for (i = 0; i < len; i++) {\n      obj[arr[i]] = 0;\n    }\n    for (i in obj) {\n      out.push(i);\n    }\n    return out;\n  },\n  compare: function( a, b ) {\n    if ( a.id < b.id ){\n      return 1;\n    }\n    if ( a.id > b.id ){\n      return -1;\n    }\n    return 0;\n  }\n}\n","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Signup.js",["179","180"],"import React, { useContext, useState } from 'react';\nimport DataAreaContext from '../utils/DataAreaContext';\nimport UserAuthModal from \"../components/Modals/UserAuthModal\";\nimport Header from \"../components/Header\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: 8,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center'\n\t},\n\tavatar: {\n\t\tmargin: 1,\n\t\tbackgroundColor: 'grey'\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: 1\n\t},\n\tsubmit: {\n\t\tmargin: 3\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogess: {\n\t\tposition: 'absolute'\n\t}\n});\n\t\nconst inputFieldValues = [\n\t{\n\t\tname: \"firstName\",\n\t\tlabel: \"First Name\",\n\t\tid: \"firstName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\"\n\t},\n\t{\n\t\tname: \"lastName\",\n\t\tlabel: \"Last Name\",\n\t\tid: \"lastName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\"\n\t},\n\t{\n\t\tname: \"email\",\n\t\tlabel: \"Email address\",\n\t\tid: \"email\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\"\n\t},\n\t{\n\t\tname: \"password\",\n\t\tlabel: \"Password\",\n\t\tid: \"password\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"password\"\n\t},\n\t{\n\t\tname: \"confirmPassword\",\n\t\tlabel: \"Confirm Password\",\n\t\tid: \"confirmPassword\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"password\"\n\t},\n];\n\nfunction Signup() {\n\tconst { signUpObj, setSignUpObj, setUserDataObj, setUserAuthResponse, userAuthModalShow, setUserAuthModalShow } = useContext(DataAreaContext);\n  const [errors, setErrors] = useState({});\n\tconst [loading, setLoading] = useState( false );\n\tconst classes = styles();\n\n  // Handles updating component state when the user types into the input field\n  const handleInputChange = (event) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\t\tsetSignUpObj({...signUpObj, [name]: value});\n    validate(name, value);\n  };\n\n  const validate = (name, value) => {\n    let temp = { ...errors };\n\t\t\n\t\tswitch (name) {\n\t\t\tcase 'email':\n\t\t\t\tconst emailRegEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\t\t\t\ttemp.email = value.match(emailRegEx) ? \"\" : \"Email is not valid.\"\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tif (\"confirmPassword\" in signUpObj) {\n\t\t\t\t\ttemp[name] = signUpObj.confirmPassword !== value ? \"Passwords much match.\" : \"\";\n\t\t\t\t\ttemp[\"confirmPassword\"] = \"\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'confirmPassword':\n\t\t\t\tif (\"password\" in signUpObj) {\n\t\t\t\t\ttemp[name] = signUpObj.password !== value ? \"Passwords much match.\" : \"\";\n\t\t\t\t\ttemp[\"password\"] = \"\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttemp[name] = !isNullOrEmpty(value) ? \"\" : \"This field is required.\";\n\t\t}\n\n    setErrors({\n      ...temp\n    });\n  };\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tsetLoading(true);\n\n\t\tconst actionCodeSettings = {\n\t\t\turl: 'https://inter-club-golf-live.web.app/login',\n\t\t\thandleCodeInApp: false\n\t\t};\n\n    firebase\n    .auth()\n    .createUserWithEmailAndPassword(\n      signUpObj.email, \n      signUpObj.password\n    )\n\t\t.then((response) => {\n\t\t\tresponse.user.sendEmailVerification(actionCodeSettings);\n\t\t\tresponse.user.updateProfile({\n\t\t\t\tdisplayName: `${signUpObj.firstName} ${signUpObj.lastName}`\n\t\t\t});\n\t\t\tsetUserDataObj(response.user);\n\t\t\tfirebase.auth().signOut();\n\t\t\tsetUserAuthResponse({\n\t\t\t\tmessage: \"You're signup has been received. We've sent you an email verification. Please verify your email through the email you received to be able to complete the signup process.\",\n\t\t\t\tstatus: 200\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tsetUserAuthModalShow(true);\n\t})\n\t\t.catch(error => {\n\t\t\tsetUserAuthResponse({\n\t\t\t\tmessage: error.message,\n\t\t\t\tstatus: 400\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tsetUserAuthModalShow(true);\n\t\t});\n\t};\n\n\tconst formIsValid = () => {\n\t\tconst isValid =\n\t\t\tsignUpObj.firstName &&\n\t\t\tsignUpObj.lastName &&\n\t\t\tsignUpObj.email &&\n\t\t\tsignUpObj.password &&\n\t\t\tsignUpObj.confirmPassword &&\n\t\t\tObject.values(errors).every((x) => x === \"\");\n\n\t\treturn isValid;\n\t};\n\n\tfunction isNullOrEmpty(v) {\n\t\treturn typeof v === 'undefined' || v === null || v.length === 0;\n\t}\n\n  return (\n    <>\n\t\t\t<UserAuthModal\n\t\t\t\tshow={userAuthModalShow}\n\t\t\t\tonHide={() => setUserAuthModalShow(false)} \n\t\t\t/>\n    \t<Header />\n\t\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t\t<CssBaseline />\n\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\t\tCreate account\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t\t{inputFieldValues.map((inputFieldValue, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t\trequired={inputFieldValue.required}\n\t\t\t\t\t\t\t\t\tfullWidth={inputFieldValue.fullWidth}\n\t\t\t\t\t\t\t\t\tid={inputFieldValue.id}\n\t\t\t\t\t\t\t\t\tlabel={inputFieldValue.label}\n\t\t\t\t\t\t\t\t\tname={inputFieldValue.name}\n\t\t\t\t\t\t\t\t\ttype={inputFieldValue.type}\n\t\t\t\t\t\t\t\t\terror={errors[inputFieldValue.name]}\n\t\t\t\t\t\t\t\t\tautoComplete={inputFieldValue.autoComplete}\n\t\t\t\t\t\t\t\t\tautoFocus={inputFieldValue.autoFocus}\n\t\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\t\t{...(errors[inputFieldValue.name] && {\n\t\t\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\t\t\thelperText: errors[inputFieldValue.name]\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\tdisabled={loading || !formIsValid()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate account\n\t\t\t\t\t\t\t{loading && <CircularProgress size={30} className={classes.progess} />}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Link href=\"login\" variant=\"body2\">\n\t\t\t\t\t\t\t\t\t{\"Already have an account? Sign in\"}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t</>\n  )\n}\n\nexport default Signup;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/PostMatchForm/index.js",["181","182","183","184","185","186"],"import React, { useContext, useState, useEffect } from 'react';\nimport API from \"../../utils/API\";\nimport Lib from \"../../utils/Lib\";\nimport DataAreaContext from '../../utils/DataAreaContext';\nimport CreateMatchModal from '../Modals/CreateMatchModal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport competition from '../../assets/data/competitions.json';\nimport matchData from '../../assets/data/matchdata.json';\nimport rounds from '../../assets/data/competitionRounds.json';\nlet isEmpty = require('lodash.isempty');\n\nconst styles = makeStyles((theme) => ({\n\tpaper: {\n\t\tpaddingTop: 10,\n\t\tpaddingLeft: 10,\n\t\tpaddingRight: 10,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t\tbackgroundColor: '#ffffff'\n\t},\n\tavatar: {\n\t\tmargin: 1,\n\t\tbackgroundColor: 'grey'\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: 1\n\t},\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n\ttextField: {\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#0a66c2\"\n    },\n    \"& .MuiSvgIcon-root\": {\n      fill: \"#0a66c2\"\n    }\n\t},\n\tsubmit: {\n\t\tmargin: 0,\n\t\tmarginBottom: 30\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogress: {\n\t\tposition: 'absolute'\n\t}\n}));\n\nconst regions = [\n  {\n    region: 'leinster'\n  },\n  {\n    region: 'ulster'\n  },\n  {\n    region: 'munster'\n  },\n  {\n    region: 'connacht'\n  },\n  {\n    region: 'all ireland'\n  }\n];\n\nconst regionAreas = [\n  {\n    regionArea: 'north'\n  },\n  {\n    regionArea: 'south'\n  },\n  {\n    regionArea: 'east'\n  },\n  {\n    regionArea: 'west'\n  },\n  {\n    regionArea: 'central'\n  }\n];\n\nconst inputFieldValues = [\n\t{\n\t\tname: \"matchDate\",\n\t\tlabel: \"\",\n\t\tid: \"matchDate\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"date\",\n\t\tdefaultValue: \"\",\n\t\tselect: false,\n\t\thelperText: \"Choose the match date\"\n\t},\n\t{\n\t\tname: \"matchTime\",\n\t\tlabel: \"\",\n\t\tid: \"matchTime\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"time\",\n\t\tdefaultValue: \"00:23\",\n\t\tselect: false,\n\t\thelperText: \"Choose the match time\"\n\t},\n\t{\n\t\tname: \"competitionName\",\n\t\tlabel: \"\",\n\t\tid: \"competitionName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tdefaultValue: \"\",\n\t\tselect: true,\n\t\thelperText: \"Choose the name of the competition\"\n\t},\n\t{\n\t\tname: \"competitionRegion\",\n\t\tlabel: \"\",\n\t\tid: \"competitionRegion\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tdefaultValue: \"\",\n\t\tselect: true,\n\t\thelperText: \"Choose the region the competition is played in\"\n\t},\n\t{\n\t\tname: \"competitionRegionArea\",\n\t\tlabel: \"\",\n\t\tid: \"competitionRegionArea\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tdefaultValue: \"\",\n\t\tselect: true,\n\t\thelperText: \"Choose the area of the region the competition is played in (if applicable)\"\n\t},\n\t{\n\t\tname: \"competitionRound\",\n\t\tlabel: \"\",\n\t\tid: \"competitionRound\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tdefaultValue: \"\",\n\t\tselect: true,\n\t\thelperText: \"Choose the round of the competition\"\n\t},\n\t{\n\t\tname: \"neutralVenueName\",\n\t\tlabel: \"\",\n\t\tid: \"neutralVenueName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tvalue: \"\",\n\t\tselect: false,\n\t\thelperText: \"Enter the venue for the match if it is neutral\"\n\t},\n\t{\n\t\tname: \"teamOneName\",\n\t\tlabel: \"\",\n\t\tid: \"teamOneName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tvalue: \"\",\n\t\tselect: false,\n\t\thelperText: \"Choose the home team name\"\n\t},\n\t{\n\t\tname: \"teamTwoName\",\n\t\tlabel: \"\",\n\t\tid: \"teamTwoName\",\n\t\trequired: true,\n\t\tfullWidth: true,\n\t\tautoComplete: \"autoComplete\",\n\t\tautoFocus: false,\n\t\ttype: \"\",\n\t\tvalue: \"\",\n\t\tselect: false,\n\t\thelperText: \"Choose the away team name\"\n\t}\n];\n\nfunction PostMatch() {\n\tconst { appMatchesOnLoad, postMatchObj, setPostMatchObj, userDataObj, setAppMatchesOnLoad, timeZone, createMathModalShow, setCreateMatchModalShow, setCreateMatchResponse, setMatchObj, oldPostMatchObj, setOldPostMatchObj } = useContext(DataAreaContext);\n  const [errors, setErrors] = useState({});\n\tconst classes = styles();\n\tconst [loading, setLoading] = useState( false );\n\tlet filteredMatchArray = [];\n\n  useEffect(() => {\n    setPostMatchObj({});\n  }, []);\n\n  useEffect(() => {\n    setOldPostMatchObj({...postMatchObj});\n  }, [postMatchObj]);\n\n  // Handles updating component state when the user types into the input field\n  const handleInputChange = (event) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\n\t\tif (name === \"neutralVenueName\" || name === \"teamOneName\" || name === \"teamTwoName\") {\n\t\t\tif (!postMatchObj.hasOwnProperty(\"individualMatchesArray\")) {\n\t\t\t\tpostMatchObj[\"individualMatchesArray\"] = [];\n\t\t\t}\n\t\t\tupdateIndividualMatchDestination(name, value);\n\t\t}\n\n\t\tif (name === \"competitionRound\") {\n\t\t\trounds.map(function(round) {\n\t\t\t\tif (value === round.round) {\n\t\t\t\t\treturn setPostMatchObj({...postMatchObj, [name]: round});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tsetPostMatchObj({...postMatchObj, [name]: value});\n\t\t}\n  };\n\n\tfunction updateIndividualMatchDestination(name, value) {\n\t\tlet oldValue = oldPostMatchObj[name];\n\t\t\n\t\tfor (let i = 0; i < postMatchObj.individualMatchesArray.length; i++) {\n\t\t\tlet individualMatch = postMatchObj.individualMatchesArray[i];\n\t\t\tif (!individualMatch.hasOwnProperty(\"matchDestination\")) continue;\n\t\t\tif (individualMatch.matchDestination.toLowerCase() === oldValue.toLowerCase()) {\n\t\t\t\tindividualMatch.matchDestination = Lib.capitalize(value);\n\t\t\t\tsetPostMatchObj({...postMatchObj, \"individualMatchesArray\": postMatchObj.individualMatch});\n\t\t\t}\n\t\t}\n\t}\n\n  const handleIndividualMatchFieldInputChange = (event, child) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\t\tconst id = isEmpty(event.target.id) ? child.props.id : event.target.id;\n\n    for (let i = 0; i < filteredMatchArray.length; i++) {\n      if (parseInt(id) === i) {\n\t\t\t\tlet object = filteredMatchArray[i];\n        for (const key in object) {\n          if (key === name) {\n            object[key] = value;\n\t\t\t\t\t\tsetPostMatchObj({...postMatchObj, \"individualMatchesArray\": filteredMatchArray});\n          }\n        }\n        return;\n      }\n    }\n  };\n\n\tlet homeTeamName = postMatchObj['teamOneName'];\n\tlet awayTeamName = postMatchObj['teamTwoName'];\n\tlet neutralVenueName = postMatchObj['neutralVenueName'];\n\tlet competitionName = postMatchObj['competitionName'];\n\t\n\tlet competitors = [\n\t\t{\n\t\t\tname: homeTeamName\n\t\t},\n\t\t{\n\t\t\tname: awayTeamName\n\t\t}\n\t];\n\n\n\tlet competitionObject;\n\tlet matchDestination = \"\";\n\n\tconst getIndividualMatchFields = () => {\n\t\tif (!isEmpty(neutralVenueName)) {\n\t\t\tcompetitors.push(\n\t\t\t\t{\n\t\t\t\t\tname: neutralVenueName\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\n\t\tlet textFields = [];\n\t\tfor (let i = 0; i < competition.length; i++) {\n\t\t\tif (competition[i].name === competitionName) {\n\t\t\t\tcompetitionObject = competition[i];\n\t\t\t}\n\t\t}\n\n\t\tif (isEmpty(competitionObject)) return;\n\t\tif (isEmpty(homeTeamName)) return;\n\t\tif (isEmpty(awayTeamName)) return;\n\n\t\tmatchData.filter(function(value, index, arr){ \n\t\t\tif (index < competitionObject.matches) {\n\t\t\t\tfilteredMatchArray.push(value);\n\t\t\t}\n\t\t});\n\t\t\n\t\tfor (let i = 0; i < competitionObject.matches; i++) {\n\t\t\tif (postMatchObj.individualMatchesArray.length === 0) {\n\t\t\t\tmatchDestination = \"\";\n\t\t\t} else if (postMatchObj.individualMatchesArray[i].matchDestination === \"empty\") {\n\t\t\t\tmatchDestination = \"\";\n\t\t\t} else {\n\t\t\t\tmatchDestination = postMatchObj.individualMatchesArray[i].matchDestination;\n\t\t\t}\n\n\t\t\t{competitionObject.singlePlayer === true ? \n\t\t\t\ttextFields.push(\n\t\t\t\t\t<>\n\t\t\t\t\t<div \n\t\t\t\t\t\tid={i}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(homeTeamName)} player name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(awayTeamName)} player name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'matchDestination'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={true}\n\t\t\t\t\t\t\terror={errors['matchDestination']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={matchDestination.toLowerCase()}\n\t\t\t\t\t\t\thelperText={'Choose the course the match is played at'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{competitors.map((clubName, index) => (\n\t\t\t\t\t\t\t\t<MenuItem id={i} key={index} value={clubName.name}>\n\t\t\t\t\t\t\t\t\t{Lib.capitalize(clubName.name)}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t<Divider fullWidth light={false} />\n\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) :\n\t\t\t\ttextFields.push(\n\t\t\t\t\t<>\n\t\t\t\t\t<div \n\t\t\t\t\t\tid={i}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(homeTeamName)} player A name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerBName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerBName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(homeTeamName)} player B name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(awayTeamName)} player A name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerBName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerBName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={`Match ${(i + 1)}: ${Lib.capitalize(awayTeamName)} player B name (if known)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'matchDestination'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={true}\n\t\t\t\t\t\t\terror={errors['matchDestination']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\thelperText={'Choose the course the match is played at'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{competitors.map((clubName, index) => (\n\t\t\t\t\t\t\t\t<MenuItem id={i} key={index} value={clubName.name}>\n\t\t\t\t\t\t\t\t\t{Lib.capitalize(clubName.name)}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t<Divider fullWidth light={false} />\n\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\treturn textFields;\n\t}\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tsetLoading(true);\n    API.postMatch({\n\t\t\ttimeZone: timeZone,\n      matchDateTime: moment(`${postMatchObj.matchDate} ${postMatchObj.matchTime}`).format(),\n      createdAt: moment().format(),\n      updatedAt: moment().format(),\n      competitionName: postMatchObj.competitionName,\n\t\t\tcompetitionConcatRegion: !isEmpty(postMatchObj.competitionRegionArea) ? postMatchObj.competitionRegion + \" \" + postMatchObj.competitionRegionArea : postMatchObj.competitionRegion,\n      competitionRegion: postMatchObj.competitionRegion,\n\t\t\tcompetitionRegionArea: !isEmpty(postMatchObj.competitionRegionArea) ? postMatchObj.competitionRegionArea : \"\",\n      competitionRound: postMatchObj.competitionRound,\n      numIndividualMatches: competitionObject.matches,\n\t\t\tindividualMatch: !isEmpty(postMatchObj.individualMatchesArray) ? postMatchObj.individualMatchesArray : filteredMatchArray,\n      teamOneName: postMatchObj.teamOneName,\n      teamTwoName: postMatchObj.teamTwoName,\n      neutralVenueName: !isEmpty(postMatchObj.neutralVenueName) ? postMatchObj.neutralVenueName : \"\",\n\t\t\tuid: userDataObj.uid,\n\t\t\tsinglePlayer: competitionObject.singlePlayer\n\t\t})\n\t\t.then((response) => {\n\t\t\tsetAppMatchesOnLoad([response.data, ...appMatchesOnLoad]);\n\t\t\tsetMatchObj({...response.data});\n\t\t\tsetCreateMatchResponse({\n\t\t\t\tmatchId: response.data.matchId,\n\t\t\t\tmessage: \"Match created successfully\",\n\t\t\t\tstatus: 200\n\t\t\t});\n\t\t\tsetCreateMatchModalShow(true);\n      setPostMatchObj({});\n      setLoading(false);\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log(error);\n\t\t\tsetCreateMatchResponse({\n\t\t\t\tmessage: error.response.data.error,\n\t\t\t\tstatus: error.response.status\n\t\t\t});\n\t\t\tsetCreateMatchModalShow(true);\n\t\t\tsetLoading(false);\n\t\t});\n\t};\n\n\tconst formIsValid = () => {\n\t\tconst isValid =\n\t\t\tpostMatchObj.matchDate &&\n\t\t\tpostMatchObj.matchTime &&\n\t\t\tpostMatchObj.competitionName &&\n\t\t\tpostMatchObj.competitionRegion &&\n\t\t\tpostMatchObj.competitionRound &&\n\t\t\tpostMatchObj.teamOneName &&\n\t\t\tpostMatchObj.teamTwoName\n\n\t\treturn isValid;\n\t};\n\n\treturn (\n\t\t<>\n\t\t<CreateMatchModal\n\t\t\tshow={createMathModalShow}\n\t\t\tonHide={() => setCreateMatchModalShow(false)} \n\t\t/>\n\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t<CssBaseline />\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Typography component=\"h1\" variant=\"h5\" style={{ color: \"#0a66c2\" }}>\n\t\t\t\t\tCreate Match\n\t\t\t\t</Typography>\n\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t{inputFieldValues.map((inputFieldValue, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired={inputFieldValue.required}\n\t\t\t\t\t\t\t\tfullWidth={inputFieldValue.fullWidth}\n\t\t\t\t\t\t\t\tid={inputFieldValue.id}\n\t\t\t\t\t\t\t\tlabel={inputFieldValue.label}\n\t\t\t\t\t\t\t\tname={inputFieldValue.name}\n\t\t\t\t\t\t\t\ttype={inputFieldValue.type}\n\t\t\t\t\t\t\t\tdefaultValue={inputFieldValue.defaultValue}\n\t\t\t\t\t\t\t\tselect={inputFieldValue.select}\n\t\t\t\t\t\t\t\terror={errors[inputFieldValue.name]}\n\t\t\t\t\t\t\t\tautoComplete={inputFieldValue.autoComplete}\n\t\t\t\t\t\t\t\tautoFocus={inputFieldValue.autoFocus}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\thelperText={inputFieldValue.helperText}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionName' ? \n\t\t\t\t\t\t\t\t\tcompetition.map((competition, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={competition.name}>\n\t\t\t\t\t\t\t\t\t\t\t{competition.name}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRegion' ? \n\t\t\t\t\t\t\t\t\tregions.map((region, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={region.region}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(region.region)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRegionArea' ? \n\t\t\t\t\t\t\t\t\tregionAreas.map((regionArea, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={regionArea.regionArea}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(regionArea.regionArea)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRound' ? \n\t\t\t\t\t\t\t\t\trounds.map((round, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={round.round}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(round.round)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t\t{!isEmpty(postMatchObj.competitionName) && !isEmpty(postMatchObj.teamOneName) && !isEmpty(postMatchObj.teamTwoName) ?\n\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\" style={{ color: \"#0a66c2\" }}>\n\t\t\t\t\t\t\tIndividual Matches\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t{getIndividualMatchFields()}\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\tdisabled={loading || !formIsValid()}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t{loading && <CircularProgress size={30} className={classes.progress} />}\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</Container>\n\t\t</>\n\t);\n}\n\nexport default PostMatch;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/UpdateModal/index.js",["187"],"import React, { useContext, useEffect, useState } from 'react';\nimport DataAreaContext from '../../../utils/DataAreaContext';\nimport API from '../../../utils/API';\nimport UpdateMatchForm from '../../UpdateMatchForm/index.js';\nimport { Button, Modal, Spinner, CloseButton } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport 'moment-timezone';\nlet isEmpty = require('lodash.isempty');\n\nfunction UpdateModal(props) {\n  const { setUpdateModalShow, setMatchObj, match, setUpdateResponse, updateResponse, updateMatchObj, setUpdateMatchObj, setOldUpdateMatchObj, appMatchesOnLoad, isMatchEdited, setIsMatchEdited } = useContext(DataAreaContext);\n\tlet history = useHistory();\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n    setOldUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n  }, []);\n\n  const updateOverallMatchScore = (object) => {\n    let array = object.individualMatch;\n    let teamOneOverallScore = 0;\n    let teamTwoOverallScore = 0;\n    for (const i of array) {\n      if (i.homeMatchScore === i.awayMatchScore) {\n        teamOneOverallScore += 0.5;\n        teamTwoOverallScore += 0.5;\n      } else if (i.homeMatchScore < i.awayMatchScore) {\n        teamTwoOverallScore += 1;\n      } else if (i.homeMatchScore > i.awayMatchScore) {\n        teamOneOverallScore += 1;\n      }\n    }\n    return {\n      teamOneScore: teamOneOverallScore,\n      teamTwoScore: teamTwoOverallScore\n    }\n  }\n\n  const handleClose = () => {\n    setUpdateModalShow(false);\n    setUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n    setIsMatchEdited(true);\n  }\n\n  const handleUpdateClick = (event) => {\n    event.preventDefault();\n    setLoading(true);\n    const updatedOverallMatchScore = updateOverallMatchScore(updateMatchObj);\n    updateMatchObj.teamOneScore = updatedOverallMatchScore.teamOneScore;\n    updateMatchObj.teamTwoScore = updatedOverallMatchScore.teamTwoScore;\n    API.updateMatch({\n      matchId: updateMatchObj.matchId,\n      matchDateTime: updateMatchObj.matchDateTime,\n      competitionName: updateMatchObj.competitionName,\n      matchStatus: updateMatchObj.matchStatus,\n\t\t\tcompetitionConcatRegion: !isEmpty(updateMatchObj.competitionRegionArea) ? updateMatchObj.competitionRegion + \" \" + updateMatchObj.competitionRegionArea : updateMatchObj.competitionRegion,\n      competitionRegion: updateMatchObj.competitionRegion,\n\t\t\tcompetitionRegionArea: !isEmpty(updateMatchObj.competitionRegionArea) ? updateMatchObj.competitionRegionArea : \"\",\n      competitionRound: updateMatchObj.competitionRound,\n      teamOneName: updateMatchObj.teamOneName,\n      teamOneScore: updateMatchObj.teamOneScore,\n      teamTwoName: updateMatchObj.teamTwoName,\n      teamTwoScore: updateMatchObj.teamTwoScore,\n      neutralVenueName: updateMatchObj.neutralVenueName,\n      individualMatch: updateMatchObj.individualMatch,\n      updatedAt: moment().format()\n    })\n    .then((response) => {\n      setUpdateResponse({\n        message: response.data.message,\n        status: response.status\n      });\n      setMatchObj({\n        ...updateMatchObj,\n        \"competitionRound\": {...updateMatchObj.competitionRound},\n        \"individualMatch\": [...updateMatchObj.individualMatch],\n        \"collaborators\": [...updateMatchObj.collaborators]\n      });\n      for (let i = 0; i < appMatchesOnLoad.length; i++) {\n        if(appMatchesOnLoad[i].matchId === updateMatchObj.matchId) {\n          appMatchesOnLoad[i] = updateMatchObj;\n        }\n      }\n      setLoading(false);\n    })\n    .catch((error) => {\n      setUpdateResponse({\n        message: error.message,\n        status: 400\n      });\n    });\n  };\n\n  const handleCloseClick = (matchId) => {\n    setUpdateModalShow(false);\n    setUpdateResponse({});\n    setUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n    setOldUpdateMatchObj(JSON.parse(JSON.stringify({...match})));\n    setIsMatchEdited(true);\n    history.push(`/match/${matchId}`);\n  }\n\n  return (\n    <>\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"true\"\n      onHide={handleClose}\n    >\n      <Modal.Header>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Update match\n        </Modal.Title>\n        <CloseButton onClick={handleClose} />\n      </Modal.Header>\n      <Modal.Body>\n        {updateResponse.status === 200 || updateResponse.status === 400 ? (\n          `${ updateResponse.message }`\n        ) : (\n          <UpdateMatchForm />\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        {updateResponse.status === 200 || updateResponse.status === 400 ?\n          <Button \n          onClick={ () => handleCloseClick(match.matchId) }\n          variant=\"outline-success\"\n          >\n            Close\n          </Button>\n          :\n          <Button\n          onClick={ (e) => handleUpdateClick(e) }\n          variant=\"outline-success\"\n          disabled={isMatchEdited}\n          >\n          {isLoading ?\n            <Spinner animation=\"border\" style={{ color: \"#0a66c2\" }} /> \n          :\n            'Update'\n          }\n          </Button>\n        }\n      </Modal.Footer>\n    </Modal>\n    </>\n  );\n}\n\nexport default UpdateModal;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/DeleteModal/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/CreateMatchModal/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/services/LocalStorage/LocalStorage.service.js",["188"],"export default {\n  get: function(key) {\n    return localStorage.getItem(key);\n  },\n  set: function (key, value) {\n    return localStorage.setItem(key, value);\n  },\n  remove: function(key) {\n    return localStorage.removeItem(key);\n  },\n  clear: function() {\n    return localStorage.clear();\n  }\n}","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/services/SessionStorage/SessionStorage.service.js",["189"],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/BurgerMenuIcon/index.js",[],["190","191"],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/SideBar/index.js",["192","193"],"import React, { useContext, useState } from 'react';\nimport Burger from '../BurgerMenuIcon';\nimport styled from 'styled-components';\nimport DataAreaContext from '../../utils/DataAreaContext';\nimport LocalStorage from '../../services/LocalStorage/LocalStorage.service';\nimport { useLocation, Link } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faGolfBall, faSignInAlt, faUserPlus, faUser, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\nconst StyledMenu = styled.nav`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  background: #f3f2ef;\n  transform: ${({ open }) => (open ? 'translateX(0)' : 'translateX(-100%)')};\n  height: 100vh;\n  text-align: left;\n  padding: 2rem;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: transform 0.3s ease-in-out;\n\n  @media (max-width: 576px) {\n    width: 100%;\n  }\n\n  a {\n    font-size: 1rem;\n    text-transform: uppercase;\n    letter-spacing: 0.5rem;\n    text-decoration: none;\n    transition: color 0.3s linear;\n\n    @media (max-width: 576px) {\n      font-size: 1.25rem;\n      text-align: left;\n    }\n  }\n`;\n\nfunction SideBar() {\n  const {\n    isAuthenticated,\n    setFilterValue,\n    userDataObj,\n    setUserDataObj,\n    setIsAuthenticated,\n    sidebarOpen,\n    setSidebarOpen,\n  } = useContext(DataAreaContext);\n  const location = useLocation();\n  const [errors, setErrors] = useState([]);\n\n  const onClickSignOutUser = (e) => {\n    e.preventDefault();\n    firebase\n      .auth()\n      .signOut()\n      .then((response) => {\n        LocalStorage.remove('AuthToken');\n        setUserDataObj({});\n        setSidebarOpen(false);\n        setIsAuthenticated(false);\n      })\n      .catch((error) => {\n        setErrors(error.response);\n      });\n  };\n\n  const onClick = () => {\n    setFilterValue('');\n    setSidebarOpen(false);\n  };\n\n  return (\n    <>\n      <StyledMenu open={sidebarOpen}>\n        <Burger open={sidebarOpen} setOpen={setSidebarOpen} style={{ float: 'right' }} />\n        <Nav justify className=\"mb-0 flex-column\" activeKey={location.pathname}>\n          <Nav.Item className=\"mx-0\">\n            <Nav.Link className=\"px-0 py-4\" as={Link} to=\"/\" eventKey=\"/\" onClick={() => onClick()}>\n              <FontAwesomeIcon icon={faHome} className=\"fa-lg\" />\n              <span className=\"mb-0\"> Home</span>\n            </Nav.Link>\n          </Nav.Item>\n          {!isAuthenticated ? (\n            <>\n              <Nav.Item className=\"mx-0\">\n                <Nav.Link className=\"px-0 py-4\" as={Link} to=\"/login\" eventKey=\"/login\" onClick={() => onClick()}>\n                  <FontAwesomeIcon icon={faSignInAlt} className=\"fa-lg\" />\n                  <span className=\"mb-0\"> Login</span>\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"mx-0\">\n                <Nav.Link\n                  className=\"px-0 py-4 pr-md-0\"\n                  as={Link}\n                  to=\"/signup\"\n                  eventKey=\"/signup\"\n                  id=\"sign-up\"\n                  onClick={() => onClick()}\n                >\n                  <FontAwesomeIcon icon={faUserPlus} className=\"fa-lg\" />\n                  <span className=\"mb-0\"> Signup</span>\n                </Nav.Link>\n              </Nav.Item>\n            </>\n          ) : (\n            <>\n              <Nav.Item className=\"mx-0\">\n                <Nav.Link\n                  className=\"px-0 py-4 pr-md-0\"\n                  as={Link}\n                  to={'/profile/' + userDataObj.uid}\n                  eventKey={'/profile/' + userDataObj.uid}\n                  id=\"profile\"\n                  onClick={() => onClick()}\n                >\n                  <FontAwesomeIcon icon={faUser} className=\"fa-lg\" />\n                  <span className=\"mb-0\"> Profile</span>\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"mx-0\">\n                <Nav.Link\n                  className=\"px-0 py-4 pr-md-0\"\n                  as={Link}\n                  to=\"/creatematch\"\n                  eventKey=\"/creatematch\"\n                  id=\"creatematch\"\n                  onClick={() => onClick()}\n                >\n                  <FontAwesomeIcon icon={faPlus} className=\"fa-lg\" />\n                  <span className=\"mb-0\"> Create match</span>\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"mx-0\">\n                <Nav.Link\n                  className=\"px-0 py-4 pr-md-0\"\n                  as={Link}\n                  to=\"/login\"\n                  eventKey=\"/login\"\n                  onClick={(e) => onClickSignOutUser(e)}\n                >\n                  <FontAwesomeIcon icon={faSignInAlt} className=\"fa-lg\" />\n                  <span className=\"mb-0\"> Logout</span>\n                </Nav.Link>\n              </Nav.Item>\n            </>\n          )}\n        </Nav>\n      </StyledMenu>\n    </>\n  );\n}\n\nexport default SideBar;\n","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/UserAuthModal/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/UpdateMatchForm/index.js",["194","195","196","197","198","199"],"import React, { useContext, useState, useEffect } from 'react';\nimport Lib from \"../../utils/Lib\";\nimport DataAreaContext from '../../utils/DataAreaContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport moment from 'moment';\nimport 'moment-timezone';\nimport competition from '../../assets/data/competitions.json';\nimport rounds from '../../assets/data/competitionRounds.json';\nlet isEmpty = require('lodash.isempty');\n\nconst styles = makeStyles((theme) => ({\n\tpaper: {\n\t\tmarginTop: 8,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center'\n\t},\n\tavatar: {\n\t\tmargin: 1,\n\t\tbackgroundColor: 'grey'\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: 1\n\t},\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    }\n  },\n\ttextField: {\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#0a66c2\"\n    },\n    \"& .MuiSvgIcon-root\": {\n      fill: \"#0a66c2\"\n    }\n\t},\n\tnotchedOutline: {\n    borderColor: '#0a66c2 !important'\n  },\n\tsubmit: {\n\t\tmargin: 3\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogress: {\n\t\tposition: 'absolute'\n\t}\n}));\n\nfunction UpdateMatch() {\n\tconst { updateMatchObj, setUpdateMatchObj, timeZone, oldUpdateMatchObj, setOldUpdateMatchObj, setIsMatchEdited } = useContext(DataAreaContext);\n  const [errors, setErrors] = useState({});\n\tconst classes = styles();\n\n  useEffect(() => {\n    setOldUpdateMatchObj(JSON.parse(JSON.stringify({...updateMatchObj})));\n  }, [updateMatchObj]);\n\t\n\tconst regions = [\n\t\t{\n\t\t\tregion: 'leinster'\n\t\t},\n\t\t{\n\t\t\tregion: 'ulster'\n\t\t},\n\t\t{\n\t\t\tregion: 'munster'\n\t\t},\n\t\t{\n\t\t\tregion: 'connacht'\n\t\t},\n\t\t{\n\t\t\tregion: 'all ireland'\n\t\t}\n\t];\n\t\n\tconst regionAreas = [\n\t\t{\n\t\t\tregionArea: 'north'\n\t\t},\n\t\t{\n\t\t\tregionArea: 'south'\n\t\t},\n\t\t{\n\t\t\tregionArea: 'east'\n\t\t},\n\t\t{\n\t\t\tregionArea: 'west'\n\t\t},\n\t\t{\n\t\t\tregionArea: 'central'\n\t\t}\n\t];\n\t\n\tconst matchStatuses = [\n\t\t{\n\t\t\tstatus: 'not started'\n\t\t},\n\t\t{\n\t\t\tstatus: 'in progress'\n\t\t},\n\t\t{\n\t\t\tstatus: 'complete'\n\t\t}\n\t];\n\t\n\tconst inputFieldValues = [\n\t\t{\n\t\t\tname: \"matchDate\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"matchDate\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\ttype: \"date\",\n\t\t\tselect: false,\n\t\t\thelperText: \"Update the match date\",\n\t\t\tvalue: moment(updateMatchObj.matchDateTime).format('yyyy-MM-DD')\n\t\t},\n\t\t{\n\t\t\tname: \"matchTime\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"matchTime\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\ttype: \"time\",\n\t\t\tselect: false,\n\t\t\thelperText: \"Update the match time\",\n\t\t\tvalue: moment(updateMatchObj.matchDateTime).tz(timeZone).format('HH:mm')\n\t\t},\n\t\t{\n\t\t\tname: \"competitionName\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"competitionName\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: updateMatchObj.competitionName,\n\t\t\tdisabled: true,\n\t\t\ttype: \"\",\n\t\t\tselect: false,\n\t\t\thelperText: \"If you've chosen the wrong competition, please delete this match & create a new match\"\n\t\t},\n\t\t{\n\t\t\tname: \"matchStatus\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"matchStatus\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: updateMatchObj.matchStatus,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: true,\n\t\t\thelperText: \"Update the status of the match\"\n\t\t},\n\t\t{\n\t\t\tname: \"competitionRegion\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"competitionRegion\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: updateMatchObj.competitionRegion,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: true,\n\t\t\thelperText: \"Update competition region\"\n\t\t},\n\t\t{\n\t\t\tname: \"competitionRegionArea\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"competitionRegionArea\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: updateMatchObj.competitionRegionArea,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: true,\n\t\t\thelperText: \"Update the area of the region the competition is played in (if applicable)\"\n\t\t},\n\t\t{\n\t\t\tname: \"competitionRound\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"competitionRound\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: updateMatchObj.competitionRound.round,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: true,\n\t\t\thelperText: \"Update competition round\"\n\t\t},\n\t\t{\n\t\t\tname: \"neutralVenueName\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"neutralVenueName\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: !isEmpty(updateMatchObj.neutralVenueName) ? Lib.capitalize(updateMatchObj.neutralVenueName) : updateMatchObj.neutralVenueName,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: false,\n\t\t\thelperText: \"Enter the venue for the match if it is neutral\"\n\t\t},\n\t\t{\n\t\t\tname: \"teamOneName\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"teamOneName\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: Lib.capitalize(updateMatchObj.teamOneName),\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: false,\n\t\t\thelperText: \"Update the home team name\"\n\t\t},\n\t\t{\n\t\t\tname: \"teamTwoName\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"teamTwoName\",\n\t\t\trequired: true,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tvalue: Lib.capitalize(updateMatchObj.teamTwoName),\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\tselect: false,\n\t\t\thelperText: \"Update the away team name\"\n\t\t}\n\t];\n\n  // Handles updating component state when the user types into the input field\n  const handleInputChange = (event) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\n\t\tif (name === \"competitionRound\") {\n\t\t\trounds.map(function(round) {\n\t\t\t\tif (value === round.round) {\n\t\t\t\t\tsetUpdateMatchObj({...updateMatchObj, [name]: {...round}});\n\t\t\t\t\tsetIsMatchEdited(false);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (name === \"neutralVenueName\" || name === \"teamOneName\" || name === \"teamTwoName\") {\n\t\t\tupdateIndividualMatchDestination(name, value);\n\t\t}\n\n\t\tif (name === \"matchDate\" || name === \"matchTime\") {\n\t\t\tlet key = \"matchDateTime\";\n\t\t\tlet valueDateTime;\n\n\t\t\tif (name === \"matchDate\") {\n\t\t\t\tlet matchTime = moment(updateMatchObj.matchDateTime).format('HH:mm');\n\t\t\t\tvalueDateTime = moment(`${value} ${matchTime}`).format();\n\t\t\t}\n\n\t\t\tif (name === \"matchTime\") {\n\t\t\t\tlet matchDate = moment(updateMatchObj.matchDateTime).format('yyyy-MM-DD');\n\t\t\t\tvalueDateTime = moment(`${matchDate} ${value}`).format();\n\t\t\t}\n\n\t\t\tsetUpdateMatchObj({...updateMatchObj, [key]: valueDateTime});\n\t\t\tsetIsMatchEdited(false);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tsetUpdateMatchObj({...updateMatchObj, [name]: value});\n\t\tsetIsMatchEdited(false);\n  };\n\n\tfunction updateIndividualMatchDestination(name, value) {\n\t\tlet oldValue = oldUpdateMatchObj[name];\n\t\t\n\t\tfor (let i = 0; i < updateMatchObj.individualMatch.length; i++) {\n\t\t\tlet individualMatch = updateMatchObj.individualMatch[i];\n\t\t\tif (individualMatch.matchDestination === oldValue) {\n\t\t\t\tindividualMatch.matchDestination = value;\n\t\t\t\tsetUpdateMatchObj(JSON.parse(JSON.stringify({...updateMatchObj})));\n\t\t\t\tsetIsMatchEdited(false);\n\t\t\t}\n\t\t}\n\t}\n\n  // Handles updating component state when the user types into the input field\n\tconst handleIndividualMatchFieldInputChange = (event, child) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\t\tconst id = isEmpty(event.target.id) ? child.props.id : event.target.id;\n\n\t\tupdateMatchObj.individualMatch.map((object, i) => {\n\t\t\tif (parseInt(id) === i) {\n\t\t\t\tif (value != \"\" && (name === \"awayMatchScore\" || name === \"homeMatchScore\")) {\n\t\t\t\t\tobject[name] = parseInt(value);\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tobject[name] = value\n\t\t\t\treturn object;\n\t\t\t}\n\t\t});\n\t\tsetUpdateMatchObj(JSON.parse(JSON.stringify({...updateMatchObj})));\n\t\tsetIsMatchEdited(false);\n  };\n\n\tlet homeTeamName = updateMatchObj['teamOneName'];\n\tlet awayTeamName = updateMatchObj['teamTwoName'];\n\tlet neutralVenueName = updateMatchObj['neutralVenueName'];\n\tlet competitionName = updateMatchObj['competitionName'];\n\t\n\tconst competitors = [\n\t\t{\n\t\t\tname: homeTeamName\n\t\t},\n\t\t{\n\t\t\tname: awayTeamName\n\t\t}\n\t];\n\tlet competitionObject;\n\n\tconst getIndividualMatchFields = () => {\n\t\tif (!isEmpty(neutralVenueName)) {\n\t\t\tcompetitors.push(\n\t\t\t\t{\n\t\t\t\t\tname: neutralVenueName\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\n\t\tlet textFields = [];\n\t\tfor(let i = 0; i < competition.length; i++) {\n\t\t\tif (competition[i].name === competitionName) {\n\t\t\t\tcompetitionObject = competition[i];\n\t\t\t}\n\t\t}\n\n\t\tif (isEmpty(competitionObject)) return;\n\t\tif (isEmpty(homeTeamName)) return;\n\t\tif (isEmpty(awayTeamName)) return;\n\t\t\n\t\tfor (let i = 0; i < updateMatchObj.individualMatch.length; i++) {\n\t\t\tlet individualMatch = updateMatchObj.individualMatch[i];\n\t\t\t{competitionObject.singlePlayer === true ? \n\t\t\t\ttextFields.push(\n\t\t\t\t\t<>\n\t\t\t\t\t<div \n\t\t\t\t\t\tid={i}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.homeMatchPlayerAName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.homeMatchPlayerAName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(homeTeamName)} player name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchScore'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchScore']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.homeMatchScore}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: If the ${Lib.capitalize(homeTeamName)} player is winning, enter the number of holes they are up by, otherwise, enter 0`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'holesPlayed'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['holesPlayed']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.holesPlayed}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update the number of holes played`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.awayMatchPlayerAName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.awayMatchPlayerAName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(awayTeamName)} player name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchScore'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchScore']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.awayMatchScore}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: If the ${Lib.capitalize(awayTeamName)} player is winning, enter the number of holes they are up by, otherwise, enter 0`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={`${i}`}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'matchDestination'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={true}\n\t\t\t\t\t\t\terror={errors['matchDestination']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.matchDestination === \"empty\" ? \"\" : individualMatch.matchDestination}\n\t\t\t\t\t\t\thelperText={'Update the course the match is played at'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{competitors.map((clubName, index) => (\n\t\t\t\t\t\t\t\t<MenuItem id={i} key={index} value={clubName.name}>\n\t\t\t\t\t\t\t\t\t{Lib.capitalize(clubName.name)}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t<Divider fullWidth light={false} />\n\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) :\n\t\t\t\ttextFields.push(\n\t\t\t\t\t<>\n\t\t\t\t\t<div \n\t\t\t\t\t\tid={i}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.homeMatchPlayerAName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.homeMatchPlayerAName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(homeTeamName)} player A name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchPlayerBName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchPlayerBName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.homeMatchPlayerBName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.homeMatchPlayerBName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(homeTeamName)} player B name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'homeMatchScore'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['homeMatchScore']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.homeMatchScore}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: If the ${Lib.capitalize(homeTeamName)} players are winning, enter the number of holes they are up by, otherwise, enter 0`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'holesPlayed'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['holesPlayed']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.holesPlayed}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update the number of holes played`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerAName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerAName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.awayMatchPlayerAName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.awayMatchPlayerAName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(awayTeamName)} player A name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchPlayerBName'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchPlayerBName']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.awayMatchPlayerBName === \"empty\" ? \"\" : Lib.capitalize(individualMatch.awayMatchPlayerBName)}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: Update ${Lib.capitalize(awayTeamName)} player B name`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'awayMatchScore'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={false}\n\t\t\t\t\t\t\terror={errors['awayMatchScore']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.awayMatchScore}\n\t\t\t\t\t\t\thelperText={`Match ${individualMatch.individualMatchId}: If the ${Lib.capitalize(awayTeamName)} players are winning, enter the number of holes they are up by, otherwise, enter 0`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tkey={i+1}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tid={i}\n\t\t\t\t\t\t\tlabel=''\n\t\t\t\t\t\t\tname={'matchDestination'}\n\t\t\t\t\t\t\ttype=''\n\t\t\t\t\t\t\tselect={true}\n\t\t\t\t\t\t\terror={errors['matchDestination']}\n\t\t\t\t\t\t\tautoComplete={'autoComplete'}\n\t\t\t\t\t\t\tautoFocus={false}\n\t\t\t\t\t\t\tonChange={handleIndividualMatchFieldInputChange}\n\t\t\t\t\t\t\tvalue={individualMatch.matchDestination === \"empty\" ? \"\" : individualMatch.matchDestination}\n\t\t\t\t\t\t\thelperText={'Update the course the match is played at'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{competitors.map((clubName, index) => (\n\t\t\t\t\t\t\t\t<MenuItem id={i} key={index} value={clubName.name}>\n\t\t\t\t\t\t\t\t\t{Lib.capitalize(clubName.name)}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TextField>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Divider fullWidth light={false} />\n\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\treturn textFields;\n\t}\n\n\treturn (\n\t\t<>\n\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t<CssBaseline />\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t{inputFieldValues.map((inputFieldValue, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired={inputFieldValue.required}\n\t\t\t\t\t\t\t\tvalue={inputFieldValue.value}\n\t\t\t\t\t\t\t\tfullWidth={inputFieldValue.fullWidth}\n\t\t\t\t\t\t\t\tid={inputFieldValue.id}\n\t\t\t\t\t\t\t\tlabel={inputFieldValue.label}\n\t\t\t\t\t\t\t\tname={inputFieldValue.name}\n\t\t\t\t\t\t\t\ttype={inputFieldValue.type}\n\t\t\t\t\t\t\t\tselect={inputFieldValue.select}\n\t\t\t\t\t\t\t\tdisabled={inputFieldValue.disabled}\n\t\t\t\t\t\t\t\terror={errors[inputFieldValue.name]}\n\t\t\t\t\t\t\t\tautoComplete={inputFieldValue.autoComplete}\n\t\t\t\t\t\t\t\tautoFocus={inputFieldValue.autoFocus}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\thelperText={inputFieldValue.helperText}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionName' ? \n\t\t\t\t\t\t\t\t\tcompetition.map((competition, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={competition.name}>\n\t\t\t\t\t\t\t\t\t\t\t{competition.name}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRegion' ? \n\t\t\t\t\t\t\t\t\tregions.map((region, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={region.region}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(region.region)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRegionArea' ? \n\t\t\t\t\t\t\t\t\tregionAreas.map((region, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={region.regionArea}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(region.regionArea)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'competitionRound' ? \n\t\t\t\t\t\t\t\t\trounds.map((round, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={round.round}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(round.round)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{inputFieldValue.id === 'matchStatus' ? \n\t\t\t\t\t\t\t\t\tmatchStatuses.map((status, index) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={index} value={status.status}>\n\t\t\t\t\t\t\t\t\t\t\t{Lib.capitalize(status.status)}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TextField>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\" style={{ color: \"#0a66c2\" }}>\n\t\t\t\t\t\tIndividual Matches\n\t\t\t\t\t</Typography>\n\t\t\t\t\t{getIndividualMatchFields()}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</Container>\n\t\t</>\n\t);\n}\n\nexport default UpdateMatch;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/Competitions.js",["200","201","202","203","204","205"],"import React, { useContext, useEffect, useState} from 'react';\nimport DataAreaContext from '../utils/DataAreaContext';\nimport API from '../utils/API';\nimport Lib from '../utils/Lib';\nimport { IsEmpty } from \"react-lodash\";\nimport { isEmpty, orderBy } from \"lodash\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport FiltersOffCanvas from '../components/FiltersOffCanvas';\nimport { Container, Row, Table } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { ShinyBlock, Space } from '../components/SkeletonBuildingBlocks/SkeletonBuildingBlocks';\nimport moment from 'moment';\n\nfunction Competition () {\n  const { filterValue, setFilterValue, matchesByCompetition, setMatchesByCompetition, setMatchObj } = useContext(DataAreaContext);\n  let { competition } = useParams();\n  const history = useHistory();\n  const competitionName = decodeURIComponent(competition);\n  const [response, setResponse] = useState({});\n  const [matchesObjByYearRegion, setMatchesObjByYearRegion] = useState({});\n  let regions;\n  let matchesByRegion;\n  let rounds;\n  let sortedRounds;\n\n  useEffect(() => {\n    setFilterValue({\n      year: moment().format('YYYY'),\n      region: \"\",\n      round: \"\",\n      golfClub: \"\"\n    });\n    setMatchesByCompetition([]);\n    getMatchesByCompetition();\n  }, []);\n\n  async function getMatchesByCompetition() {\n    await API.getMatchesByCompetitionOnLoad(competition)\n      .then(res => {\n        setMatchesByCompetition(res.data);\n        setMatchesObjByYearRegion(matchesByYearRegion(res.data));\n        setResponse({ code: 200 });\n      })\n      .catch(err => console.log(err));\n  }\n\n  const matchesByYearRegion = (matches) => {\n    let matchesByYearRegion = {};\n\n    for (let i = 0; i < matches.length; i++) {\n      const match = matches[i];\n      \n      const matchYear = moment(match.matchDateTime).format('YYYY');\n      const concatRegion = match.competitionConcatRegion;\n      const matchId = match.matchId;\n\n      if (!matchesByYearRegion.hasOwnProperty(matchYear)) {\n        matchesByYearRegion[matchYear] = {};\n      }\n\n      if (!matchesByYearRegion[matchYear].hasOwnProperty(concatRegion)) {\n        matchesByYearRegion[matchYear][concatRegion] = {};\n      }\n\n      if (!matchesByYearRegion[matchYear][concatRegion].hasOwnProperty(matchId)) {\n        matchesByYearRegion[matchYear][concatRegion][matchId] = {};\n      }\n      \n      matchesByYearRegion[matchYear][concatRegion][matchId] = match;\n    }\n\n    return matchesByYearRegion;\n  }\n\n  const uniqueMatchYears = Lib.eliminateDuplicates(orderBy(matchesByCompetition, \"matchDateTime\", \"desc\").map(({ matchDateTime }) => moment(matchDateTime).format('YYYY'))).sort(function(a, b) {\n    return b - a;\n  });\n\n  const getMatchesByRegion = (matchesObjByRegion) => {\n    let matchesByRegion = [];\n\n    for (const key in matchesObjByRegion) {\n      matchesByRegion.push(matchesObjByRegion[key]);\n    }\n  \n    return matchesByRegion;\n  }\n\n  const getRoundsByRegion = (matches) => {\n    let rounds = [];\n    \n    for (const key in matches) {\n      rounds.push(matches[key].competitionRound);\n    }\n  \n    return rounds;\n  }\n\n  const getSortedRounds= (rounds) => {\n    const sortedRounds = rounds.sort(Lib.compare);\n  \n    const roundArray = sortedRounds.map(function(round) {\n      return round.round;\n    });\n  \n    return Lib.eliminateDuplicates(roundArray);\n  }\n\n  const renderRegionHeading = (matchesObjByRegions, region) => {\n    matchesByRegion = getMatchesByRegion(matchesObjByRegions[region]);\n    let filteredMatchesByRegion;\n\n    if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      filteredMatchesByRegion = matchesByRegion.filter(match => {\n        if (match.competitionConcatRegion === filterValue.region &&\n            match.competitionRound.round === filterValue.round &&\n           (match.teamOneName.toLowerCase() === filterValue.golfClub || match.teamTwoName.toLowerCase() === filterValue.golfClub)) return true;\n      });\n      \n       if (!isEmpty(filteredMatchesByRegion)) {\n        return (\n          renderRegionBody(region, true, filteredMatchesByRegion)\n        )\n      }\n    }\n\n    if ((!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) ||\n        (!isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) ||\n        (isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub))) {\n      filteredMatchesByRegion = matchesByRegion.filter(match => {\n        if ((match.competitionConcatRegion === filterValue.region &&\n             match.competitionRound.round === filterValue.round) ||\n            (match.competitionConcatRegion === filterValue.region &&\n            (match.teamOneName.toLowerCase() === filterValue.golfClub || match.teamTwoName.toLowerCase() === filterValue.golfClub)) ||\n            (match.competitionRound.round === filterValue.round &&\n            (match.teamOneName.toLowerCase() === filterValue.golfClub || match.teamTwoName.toLowerCase() === filterValue.golfClub))) return true;\n      });\n      \n       if (!isEmpty(filteredMatchesByRegion)) {\n        return (\n          renderRegionBody(region, true, filteredMatchesByRegion)\n        )\n      }\n    }\n\n    if ((!isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) ||\n        (isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) ||\n        (isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub))) {\n      filteredMatchesByRegion = matchesByRegion.filter(match => {\n        if ((match.competitionConcatRegion === filterValue.region) ||\n            (match.competitionRound.round === filterValue.round) ||\n            (match.teamOneName.toLowerCase() === filterValue.golfClub || match.teamTwoName.toLowerCase() === filterValue.golfClub)) return true;\n      });\n      \n       if (!isEmpty(filteredMatchesByRegion)) {\n        return (\n          renderRegionBody(region, true, filteredMatchesByRegion)\n        )\n      }\n    }\n\n    if (isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      \n      return (\n        renderRegionBody(region, false, matchesByRegion)\n      )\n    }\n  }\n\n  const renderRegionBody = (region, isFiltersPopulated, matchesByRegion) => {\n    if (isFiltersPopulated) {\n      rounds = getRoundsByRegion(matchesByRegion);\n      sortedRounds = getSortedRounds(rounds);\n    } else {\n      rounds = getRoundsByRegion(matchesByRegion);\n      sortedRounds = getSortedRounds(rounds);\n    }\n  \n    return (\n      <>\n      <div style={{ marginTop: '25px', paddingTop: '15px', textAlign: 'center' }}>\n        <h4>{Lib.capitalize(region)}</h4>\n      </div>\n      <div>\n        <>\n        {\n          sortedRounds.map(function(round) {\n            return (\n              renderRoundBody(matchesByRegion, round)\n            )\n          })\n        }\n        </>\n      </div>\n      </>\n    )\n  }\n\n  const renderRoundBody = (matchesObjByRegion, round) => {\n    if (filterValue.round === \"\") {\n      return (\n        renderRoundHeading(round, matchesObjByRegion)\n      )\n    } else if (round === filterValue.round) {\n      return (\n        renderRoundHeading(round, matchesObjByRegion)\n      )\n    }\n  }\n\n  const renderRoundHeading = (round, matches) => {\n    return (\n      <>\n      <Row>\n        <Table hover size=\"sm\" className=\"caption-top\" style={{ tableLayout: 'fixed' }}>\n          <caption style={{ color: '#0a66c2', fontWeight: '900', textAlign: 'center' }}>{Lib.capitalize(round)}</caption>\n          <thead>\n            <tr>\n              <th>Home Team</th>\n              <th>Score</th>\n              <th>Away Team</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              matches.map(function(match) {\n                if (match.competitionRound.round === round) {\n                  return (\n                    renderRoundMatches(match)\n                  )\n                }\n              })\n            }\n          </tbody>\n        </Table>\n      </Row>\n      </>\n    )\n  }\n\n  const renderRoundMatches = (match) => {\n    if (match.teamOneName.toLowerCase().includes(filterValue.golfClub.toLowerCase()) ||\n        match.teamTwoName.toLowerCase().includes(filterValue.golfClub.toLowerCase())) {\n      return (\n        <>\n        <tr key={match.matchId} onClick={(e) => onClickRow(e, match)} style={{ cursor: \"pointer\" }}>\n          <td>{Lib.capitalize(match.teamOneName)}</td>\n          <td style={{ background: '#0a66c2' }}>\n            {getScore(match)}\n          </td>\n          <td>{Lib.capitalize(match.teamTwoName)}</td>\n        </tr>\n        <tr>\n          <td colSpan=\"3\">{Lib.capitalize(match.matchStatus)}</td>\n        </tr>\n        </>\n      )\n    }\n  }\n\n  const onClickRow = (e, match) => {\n    e.preventDefault();\n    setMatchObj({\n      ...match,\n      \"competitionRound\": {...match.competitionRound},\n      \"individualMatch\": [...match.individualMatch],\n      \"collaborators\": [...match.collaborators]\n    });\n    const path = \"/match/\" + match.matchId;\n    history.push(path);\n  }\n\n  const getScore = (match) => {\n    if (match.teamOneScore > match.teamTwoScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.teamOneScore} - {match.teamTwoScore}\n          <span style={{ float: 'right', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else if (match.teamOneScore < match.teamTwoScore) {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          <span style={{ float: 'left', color: '#0a66c2' }}><FontAwesomeIcon icon={ faArrowLeft } className='fa-sm' /></span>\n          {match.teamOneScore} - {match.teamTwoScore}\n          <span style={{ float: 'right' }}><FontAwesomeIcon icon={ faArrowRight } className='fa-sm' /></span>\n        </div>\n      )\n    } else {\n      return (\n        <div style={{ color: '#ffffff', fontWeight: '900' }}>\n          A/S\n        </div>\n      )\n    }\n  }\n  \n  return (\n    <>\n    <FiltersOffCanvas\n      matches={matchesByCompetition}\n    />\n    <Header />\n    <Container>\n      <div>\n        <div style={{ marginTop: '25px', paddingTop: '15px', textAlign: 'center' }}>\n          <h4>{competitionName}</h4>\n        </div>\n        <IsEmpty\n          value={matchesObjByYearRegion}\n          yes={() =>\n            <>\n            {response.code === 200 ?\n              <div style={{ textAlign: \"center\" }}>\n                <br />\n                <br />\n                <h5>There's been no matches created for the {competitionName} to date 🙁</h5>\n              </div>\n              :\n              <>\n              <div className=\"py-5\">\n                <br />\n                <ShinyBlock height=\"1.5rem\" />\n                <Space height=\"1rem\" />\n                <ShinyBlock height=\"12rem\" />\n                <Space height=\"1rem\" />\n                <ShinyBlock height=\"12rem\" />\n                <Space height=\"1rem\" />\n                <br />\n              </div>\n              </>\n            }\n            </>\n          }\n          no={() => (\n            <>\n            {uniqueMatchYears.includes(filterValue.year) ?\n              <>\n              {uniqueMatchYears.map(function(matchYear) {\n                regions = Object.keys(matchesObjByYearRegion[matchYear]).sort();\n                if (matchYear === filterValue.year) {\n                  return (\n                    <>\n                    <div style={{ marginTop: '25px', paddingTop: '15px', textAlign: 'center' }}>\n                      <h4>{Lib.capitalize(matchYear)}</h4>\n                    </div>\n                      <>\n                      {regions.map(function(region) {\n                        return (\n                          renderRegionHeading(matchesObjByYearRegion[matchYear], region)\n                        )\n                      })}\n                      </>\n                    </>\n                  )\n                }\n              })}\n              </>\n            :\n              <div style={{ textAlign: \"center\" }}>\n                <br />\n                <br />\n                <h5>There are no matches created for the {competitionName} for {filterValue.year} 🙁</h5>\n              </div>\n            }\n            </>\n          )}\n        />\n      </div>\n    </Container>\n    <Footer />\n    </>\n  );\n}\n\nexport default Competition;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/ComboBox/index.js",["206"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport competitions from '../../assets/data/competitions.json';\n\nconst useStyles = makeStyles({\n  root: {\n    \"& .MuiInputLabel-outlined\": {\n      color: \"#ffffff\"\n    },\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#0a66c2\",\n      backgroundColor: \"#0a66c2\"\n    },\n    \"& .MuiSvgIcon-root\": {\n      fill: \"#ffffff!important\"\n    }\n  }\n});\n\nfunction ComboBox() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  function handleInputChange(event, value) {\n\t\tevent.preventDefault();\n\n    competitions.map(function(competition) {\n      if (value === competition.name) {\n        const encodedURI = encodeURIComponent(value);\n        history.push('/competition/' + encodedURI);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      className={classes.root}\n      options={competitions}\n      getOptionLabel={(option) => option.name}\n      onInputChange={handleInputChange}\n      renderInput={(params) => <TextField {...params} label=\"Choose a competition\" variant=\"outlined\" />}\n    />\n\t);\n}\n\nexport default ComboBox;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Wrapper/index.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/FiltersOffCanvas/index.js",["207","208","209","210","211","212","213","214","215","216","217","218"],"import React, { useContext, useEffect } from 'react';\nimport './index.css';\nimport DataAreaContext from '../../utils/DataAreaContext';\nimport Lib from '../../utils/Lib';\nimport { Offcanvas, Button, Form, FloatingLabel } from 'react-bootstrap';\nimport { orderBy } from \"lodash\";\nimport { useLocation } from \"react-router-dom\";\nimport moment from 'moment';\nlet isEmpty = require('lodash.isempty');\n\nfunction FiltersOffCanvas(props) {\n  const { showFilters, setShowFilters, setFilterValue, filterValue } = useContext(DataAreaContext);\n  let location = useLocation();\n  let matchYears;\n  let matchListByYear;\n  let sortedMatchRegions;\n  let sortedMatchRounds;\n  let sortedGolfClubs;\n\n  useEffect(() => {\n    setFilterValue({\n      year: moment().format('YYYY'),\n      region: \"\",\n      round: \"\",\n      golfClub: \"\"\n    });\n  }, []);\n\n  // building data points for each filter when only year is set\n  // populate the year filter with current year (even if there are no matches for that year) and years where matches exist\n  \n  if (isEmpty(props.matches)) props.matches = [];\n  // populate the regions where matches were played in the selected year\n  matchYears = Lib.eliminateDuplicates(orderBy(props.matches, \"matchDateTime\", \"asc\").map(({ matchDateTime }) => moment(matchDateTime).format('YYYY'))).sort(function(a, b) {\n    return b - a;\n  });\n  if (!matchYears.includes(moment().format('YYYY'))) matchYears.push(moment().format('YYYY'));\n  matchListByYear = props.matches.filter(function(match) {\n    if (filterValue.year === moment(match.matchDateTime).format('YYYY')) {\n      return match;\n    }\n  });\n\n  let matchRegions = matchListByYear.map(({ competitionConcatRegion }) => competitionConcatRegion);\n  let removedDuplicateMatchRegions = Lib.eliminateDuplicates(matchRegions);\n  sortedMatchRegions = removedDuplicateMatchRegions.sort();\n\n  let matchRounds = matchListByYear.filter(match => {\n    // filter by region, round, & golf club - show rounds available for the region selected\n    if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region) {\n        return true;\n      }\n    }\n\n    // filter by region & golf club with no round selected - we still want to show all rounds for the region & golf club selected\n    if (!isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region &&\n          (filterValue.golfClub === match.teamOneName.toLowerCase() || filterValue.golfClub === match.teamTwoName.toLowerCase())) {\n        return true;\n      }\n    }\n\n    // filter by region & round with no golf club selected - we still want to show all rounds for the region selected\n    if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region) {\n        return true;\n      }\n    }\n\n    // filter by round & golf club with no region selected - we still want to show all rounds for the golf club selected\n    if (isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      if (filterValue.golfClub === match.teamOneName.toLowerCase() || filterValue.golfClub === match.teamTwoName.toLowerCase()) {\n        return true;\n      }\n    }\n\n    // filter by region\n    if (!isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region) {\n        return true;\n      }\n    }\n\n    // filter by round\n    if (isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      return true;\n    }\n\n    // filter by golf club\n    if (isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      if (filterValue.golfClub === match.teamOneName.toLowerCase() || filterValue.golfClub === match.teamTwoName.toLowerCase()) {\n        return true;\n      }\n    }\n\n    // no filters\n    if (isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      return true;\n    }\n  }).map(match => match.competitionRound.round);\n  let removedDuplicateMatchRounds = Lib.eliminateDuplicates(matchRounds);\n  sortedMatchRounds = removedDuplicateMatchRounds.sort();\n\n  let golfClubsByRegionRound = matchListByYear.filter(match => {\n    // if all 3 filters are selected, we return all golf clubs available for the region and round\n    if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region &&\n          match.competitionRound.round === filterValue.round) {\n        return true;\n      }\n    }\n\n    // filter by region & round\n    if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      if (match.competitionConcatRegion === filterValue.region &&\n          match.competitionRound.round === filterValue.round) {\n        return true;\n      }\n    }\n\n    // filter by region or by region & golf club\n    if ((!isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) ||\n        (!isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub))) {\n      if (match.competitionConcatRegion === filterValue.region) {\n        return true;\n      }\n    }\n\n    // filter by round or by round & golf club\n    if ((isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) ||\n        (isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub))) {\n      if (match.competitionRound.round === filterValue.round) {\n        return true;\n      }\n    }\n\n    // filter by golf club\n    if (isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n      return true;\n    }\n\n    // no filters\n    if (isEmpty(filterValue.region) && isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n      return true;\n    }\n  });\n  let golfClubsTeamOneName = golfClubsByRegionRound.map(({ teamOneName }) => teamOneName.toLowerCase());\n  let golfClubsTeamTwoName = golfClubsByRegionRound.map(({ teamTwoName }) => teamTwoName.toLowerCase());\n  let golfClubs = golfClubsTeamOneName.concat(golfClubsTeamTwoName);\n  let removedDuplicateGolfClubNames = Lib.eliminateDuplicates(golfClubs);\n  sortedGolfClubs = removedDuplicateGolfClubNames.sort();\n\n  const isFilterRoundInNewFilterRegion = (newRegionFilterValue) => {          \n    let roundsByNewRegionFilterValue = matchListByYear.filter(match => {\n      if (match.competitionConcatRegion === newRegionFilterValue) {\n        return true;\n      }\n    }).map(match => match.competitionRound.round);\n\n    if (!roundsByNewRegionFilterValue.includes(filterValue.round)) {\n      return false\n    } else {\n      return true;\n    };\n  }\n\n  const isFilterGolfClubInNewFilterRegion = (newRegionFilterValue) => {          \n    let matchesByNewRegionFilterValue = matchListByYear.filter(match => {\n      if (match.competitionConcatRegion === newRegionFilterValue) {\n        return true;\n      }\n    });\n    let matchTeamOneName = matchesByNewRegionFilterValue.map(({ teamOneName }) => teamOneName.toLowerCase());\n    let matchTeamTwoName = matchesByNewRegionFilterValue.map(({ teamTwoName }) => teamTwoName.toLowerCase());\n    let golfClubs = matchTeamOneName.concat(matchTeamTwoName);\n    let removedDuplicateGolfClubNames = Lib.eliminateDuplicates(golfClubs);\n\n    if (!removedDuplicateGolfClubNames.includes(filterValue.golfClub)) {\n      return false\n    } else {\n      return true;\n    };\n  }\n\n  const isFilterGolfClubInNewFilterRegionRound = (newRegionRoundFilterValue, key) => {\n    let matchesByNewRegionRoundFilterValue;\n    if (key === \"region\") {          \n      matchesByNewRegionRoundFilterValue = matchListByYear.filter(match => {\n        if (match.competitionConcatRegion === newRegionRoundFilterValue &&\n          match.competitionRound.round === filterValue.round) {\n          return true;\n        }\n      });\n    } else if (key === \"round\") {          \n      matchesByNewRegionRoundFilterValue = matchListByYear.filter(match => {\n        if (match.competitionConcatRegion === filterValue.region &&\n          match.competitionRound.round === newRegionRoundFilterValue) {\n          return true;\n        }\n      });\n    }\n    let matchTeamOneName = matchesByNewRegionRoundFilterValue.map(({ teamOneName }) => teamOneName.toLowerCase());\n    let matchTeamTwoName = matchesByNewRegionRoundFilterValue.map(({ teamTwoName }) => teamTwoName.toLowerCase());\n    let golfClubs = matchTeamOneName.concat(matchTeamTwoName);\n    let removedDuplicateGolfClubNames = Lib.eliminateDuplicates(golfClubs);\n\n    if (!removedDuplicateGolfClubNames.includes(filterValue.golfClub)) {\n      return false\n    } else {\n      return true;\n    };\n  }\n\n  function handleInputChange(event, key) {\n    event.preventDefault();\n    let eventValue = event.target.value.toLowerCase();\n\n    switch (key) {\n      case \"year\":\n        setFilterValue({...filterValue,\n          \"year\": eventValue,\n          \"golfClub\": \"\",\n          \"region\": \"\",\n          \"round\": \"\"\n        });\n        break;\n      case \"region\":\n        filterValue.region = eventValue;\n\n        // On change of region where region, round & golf club are selected, and the golf club is not in that region, we need to clear the golf club filter value\n        if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n          if (!isFilterRoundInNewFilterRegion(eventValue)) filterValue.round = \"\";\n          if (!isFilterGolfClubInNewFilterRegion(eventValue)) filterValue.golfClub = \"\";\n          if (!isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n            if (!isFilterGolfClubInNewFilterRegionRound(eventValue, key)) filterValue.golfClub = \"\";\n          }\n        }\n\n        // On change of region where region and round are selected, and the round is not in that region, we need to clear the round filter value\n        if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && isEmpty(filterValue.golfClub)) {\n          if (!isFilterRoundInNewFilterRegion(eventValue)) filterValue.round = \"\";\n        }\n\n        // On change of region where region and golf club are selected, and the golf club is not in that region, we need to clear the round filter value\n        if (!isEmpty(filterValue.region) && isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n          if (!isFilterGolfClubInNewFilterRegion(eventValue)) filterValue.golfClub = \"\";\n        }\n\n        setFilterValue({...filterValue,\n          \"region\": eventValue\n        });\n        break;\n      case \"round\":\n        filterValue.round = eventValue;\n\n        // On change of round where region, round and golf club are selected, and the golf club is not in that region and round, we need to clear the golf club filter value\n        if (!isEmpty(filterValue.region) && !isEmpty(filterValue.round) && !isEmpty(filterValue.golfClub)) {\n          if (!isFilterGolfClubInNewFilterRegionRound(eventValue, key)) filterValue.golfClub = \"\";\n        }\n\n        setFilterValue({...filterValue,\n          \"round\": eventValue\n        });\n        break;\n      case \"golfClub\":\n        setFilterValue({...filterValue,\n          \"golfClub\": eventValue\n        });\n        break;\n      default:\n        setFilterValue({...filterValue, [key]: event.target.value});\n        break;\n    }\n  };\n\n  function handleApplyFiltersSubmit(event) {\n    event.preventDefault();\n    setShowFilters(false);\n  };\n\n  const handleClose = () => {\n    setShowFilters(false);\n  };\n\n  function handleClearFiltersSubmit(event) {\n    event.preventDefault();\n\n    if (location.pathname.startsWith(\"/competition\")) {\n      setFilterValue({\n        year: moment().format('YYYY'),\n        region: \"\",\n        round: \"\",\n        golfClub: \"\"\n      });\n    } else {\n      setFilterValue({\n        year: \"\",\n        region: \"\",\n        round: \"\",\n        golfClub: \"\"\n      });\n    }\n    setShowFilters(false);\n  };\n  \n  return (\n    <>\n    <Offcanvas show={showFilters} onHide={handleClose}>\n      <Offcanvas.Header>\n        <Offcanvas.Title>Filters</Offcanvas.Title>\n      </Offcanvas.Header>\n      <Offcanvas.Body>\n        <Form>\n          <>\n          <FloatingLabel controlId=\"floatingSelect\" label=\"Filter by year\">\n            <Form.Select aria-label=\"Filter by year\" onChange={(e) => handleInputChange(e, \"year\")}>\n                <>\n                {!isEmpty(filterValue.year) ? <option selected>{filterValue.year}</option> : null}\n                <option value=\"\">{\"\"}</option>\n                {matchYears.map(function(year) {\n                  if (filterValue.year !== year) {\n                    return (\n                      <option value={year}>{year}</option>\n                    )\n                  }\n                })}\n                </>\n            </Form.Select>\n          </FloatingLabel>\n          <br />\n          <FloatingLabel controlId=\"floatingSelect\" label=\"Filter by region\">\n            <Form.Select aria-label=\"Filter by region\" onChange={(e) => handleInputChange(e, \"region\")}>\n                <>\n                {!isEmpty(filterValue.region) ? <option selected>{Lib.capitalize(filterValue.region)}</option> : null}\n                <option value=\"\">{\"\"}</option>\n                {sortedMatchRegions.map(function(region) {\n                  if (filterValue.region !== region) {\n                    return (\n                      <option value={Lib.capitalize(region)}>{Lib.capitalize(region)}</option>\n                    )\n                  }\n                })}\n                </>\n            </Form.Select>\n          </FloatingLabel>\n          <br />\n          <FloatingLabel controlId=\"floatingSelect\" label=\"Filter by round\">\n            <Form.Select aria-label=\"Filter by round\" onChange={(e) => handleInputChange(e, \"round\")}>\n                <>\n                {sortedMatchRounds.includes(filterValue.round) ? <option selected>{Lib.capitalize(filterValue.round)}</option> : null}\n                <option value=\"\">{\"\"}</option>\n                {sortedMatchRounds.map(function(round) {\n                  if (filterValue.round !== round) {\n                    return (\n                      <option value={Lib.capitalize(round)}>{Lib.capitalize(round)}</option>\n                    )\n                  }\n                })}\n                </>\n            </Form.Select>\n          </FloatingLabel>\n          <br />\n          <FloatingLabel controlId=\"floatingSelect\" label=\"Filter matches by golf club\">\n            <Form.Select aria-label=\"Filter matches by golf club\" onChange={(e) => handleInputChange(e, \"golfClub\")}>\n                <>\n                {sortedGolfClubs.includes(filterValue.golfClub) ? <option selected>{Lib.capitalize(filterValue.golfClub)}</option> : null}\n                <option value=\"\">{\"\"}</option>\n                {sortedGolfClubs.map(function(golfClub) {\n                  if (filterValue.golfClub !== golfClub) {\n                    return (\n                      <option value={Lib.capitalize(golfClub)}>{Lib.capitalize(golfClub)}</option>\n                    )\n                  }\n                })}\n                </>\n            </Form.Select>\n          </FloatingLabel>\n          </>\n          <br />\n          <Button variant=\"outline-primary\" onClick={handleApplyFiltersSubmit} className=\"me-2\">\n            Apply filters\n          </Button>\n          <Button variant=\"outline-danger\" onClick={handleClearFiltersSubmit} className=\"me-2\">\n            Clear filters\n          </Button>\n        </Form>\n      </Offcanvas.Body>\n    </Offcanvas>\n    </>\n  );\n}\n\nexport default FiltersOffCanvas;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/pages/About.js",[],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/AddCollaboratorsModal/index.js",["219","220","221","222","223"],"import React, { useContext, useEffect, useState } from 'react';\nimport DataAreaContext from '../../../utils/DataAreaContext';\nimport API from '../../../utils/API';\nimport AddCollaboratorsForm from '../../AddCollaboratorsForm/index.js';\nimport { Button, Modal, Spinner, CloseButton } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport 'moment-timezone';\nlet isEmpty = require('lodash.isempty');\n\nfunction AddCollaboratorsModal(props) {\n  const { appMatchesOnLoad, match, setMatchObj, collaboratorsUpdateResponse, setCollaboratorsUpdateResponse, setAddCollaboratorsModalShow, collaborators, setCollaborators, isCollaboratorsEdited, setIsCollaboratorsEdited } = useContext(DataAreaContext);\n\tlet history = useHistory();\n  const [isLoading, setLoading] = useState(false);\n  const [collaboratorsNotFound, setCollaboratorsNotFound] = useState(\"\");\n\n  useEffect(() => {\n    setCollaborators(JSON.parse(JSON.stringify({...match})));\n  }, []);\n\n  const handleClose = () => {\n    setAddCollaboratorsModalShow(false);\n    setCollaboratorsUpdateResponse({});\n    setCollaboratorsNotFound(\"\");\n    setIsCollaboratorsEdited(true);\n    setCollaborators(JSON.parse(JSON.stringify({...match})));\n  }\n\n  const isEmail = (email) => {\n    const emailRegEx =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (email.match(emailRegEx)) return true;\n    else return false;\n  };\n\n  const handleAddCollaboratorsClick = (event) => {\n    event.preventDefault();\n    setLoading(true);\n    \n    let requestArr = [];\n    let collaboratorsFiltered = collaborators.collaborators.filter((collab, i) => {\n      let emailKey = \"email\" + (i+1);\n      if (collab[emailKey] !== \"\" && isEmail(collab[emailKey])) {\n        requestArr.push(collab[emailKey]);\n        return collab;\n      };\n    });\n\n    if (!isEmpty(requestArr)) {\n      API.getUsers({email: requestArr})\n      .then((getUsersResult) => {\n        let collabsNotFound = \"\";\n  \n        collaboratorsFiltered.filter((collab, i) => {\n          let emailKey = \"email\" + (i+1);\n          getUsersResult.data.users.filter(users => {\n            if (collab[emailKey] === users.email) {\n              collab.userId = users.uid;\n              collab[\"dateUpdated\"] = moment().format();\n            }\n          });\n  \n          getUsersResult.data.notFound.filter(users => {\n            if (collab[emailKey] === users.email) {\n              collabsNotFound += users.email + \", \";\n              collaboratorsFiltered.splice(i, 1);\n            }\n          });\n        })\n  \n        setCollaborators(JSON.parse(JSON.stringify({...collaborators})));\n        setCollaboratorsNotFound(collabsNotFound);\n      })\n      .then(() => {\n        API.updateMatch({\n          matchId: match.matchId,\n          collaborators: collaboratorsFiltered,\n          updatedAt: moment().format()\n        })\n        .then((response) => {\n          setCollaboratorsUpdateResponse({\n            message: response.data.message,\n            status: response.status\n          });\n          setMatchObj({...match, \"collaborators\": collaboratorsFiltered, \"updatedAt\": moment().format()});\n          for (let i = 0; i < appMatchesOnLoad.length; i++) {\n            if(appMatchesOnLoad[i].matchId === match.matchId) {\n              appMatchesOnLoad[i].collaborators = collaboratorsFiltered;\n              appMatchesOnLoad[i].updatedAt = moment().format();\n            }\n          }\n          setLoading(false);\n        })\n        .catch((error) => {\n          setCollaboratorsUpdateResponse({\n            message: error.message,\n            status: 400\n          });\n        });\n      })\n      .catch((error) => {\n        setCollaboratorsUpdateResponse({\n          message: error.message,\n          status: 400\n        });\n      });\n    } else {\n      API.updateMatch({\n        matchId: match.matchId,\n        collaborators: [],\n        updatedAt: moment().format()\n      })\n      .then((response) => {\n        setCollaboratorsUpdateResponse({\n          message: response.data.message,\n          status: response.status\n        });\n        setMatchObj({...match, \"collaborators\": [], \"updatedAt\": moment().format()});\n        for (let i = 0; i < appMatchesOnLoad.length; i++) {\n          if(appMatchesOnLoad[i].matchId === match.matchId) {\n            appMatchesOnLoad[i].collaborators = collaborators;\n            appMatchesOnLoad[i].updatedAt = moment().format();\n          }\n        }\n        setCollaborators({...collaborators, \"collaborators\": [], \"updatedAt\": moment().format()});\n        setLoading(false);\n      })\n      .catch((error) => {\n        setCollaboratorsUpdateResponse({\n          message: error.message,\n          status: 400\n        });\n      });\n    }\n  };\n\n  const handleCloseClick = (matchId) => {\n    setAddCollaboratorsModalShow(false);\n    setCollaboratorsUpdateResponse({});\n    setCollaboratorsNotFound(\"\");\n    setIsCollaboratorsEdited(true);\n    history.push(`/match/${matchId}`);\n  }\n\n  return (\n    <>\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"true\"\n      onHide={handleClose}\n    >\n      <Modal.Header>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {collaboratorsUpdateResponse.status === 200 || collaboratorsUpdateResponse.status === 400 ? (\n            \"Collaborators added\"\n          ) : (\n            \"Add up to 5 Collaborators\"\n          )}\n        </Modal.Title>\n        <CloseButton onClick={handleClose} />\n      </Modal.Header>\n      <Modal.Body>\n        {collaboratorsUpdateResponse.status === 200 || collaboratorsUpdateResponse.status === 400 ? (\n          <>\n          {\n            isEmpty(collaboratorsNotFound) ? (\n              `${ collaboratorsUpdateResponse.message }.`\n            ) : (\n              `${ collaboratorsUpdateResponse.message }.\\n\n              The following email/s ${ collaboratorsNotFound }are not registered user/s & are unable to be added as collaborators at this stage.\\n\n              To be eligible to be added as a collaborator, the email is required to be a registered user.`\n            )\n          }\n          </>\n        ) : (\n          <AddCollaboratorsForm \n            matchCollaborators={collaborators}\n          />\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        {collaboratorsUpdateResponse.status === 200 || collaboratorsUpdateResponse.status === 400 ?\n          <Button \n          onClick={ () => handleCloseClick(match.matchId) }\n          variant=\"outline-success\"\n          >\n            Close\n          </Button>\n          :\n          <Button\n          onClick={ (e) => handleAddCollaboratorsClick(e) }\n          variant=\"outline-success\"\n          disabled={isCollaboratorsEdited}\n          >\n          {isLoading ?\n            <Spinner animation=\"border\" style={{ color: \"#0a66c2\" }} /> \n          :\n            'Add Collaborators'\n          }\n          </Button>\n        }\n      </Modal.Footer>\n    </Modal>\n    </>\n  );\n}\n\nexport default AddCollaboratorsModal;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/AddCollaboratorsForm/index.js",["224","225","226"],"import React, { useContext, useState, useEffect } from 'react';\nimport DataAreaContext from '../../utils/DataAreaContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport moment from 'moment';\nimport 'moment-timezone';\nlet isEmpty = require('lodash.isempty');\n\nconst styles = makeStyles((theme) => ({\n\tpaper: {\n\t\tmarginTop: 8,\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center'\n\t},\n\tavatar: {\n\t\tmargin: 1,\n\t\tbackgroundColor: 'grey'\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: 1\n\t},\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    }\n  },\n\ttextField: {\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#0a66c2\"\n    },\n    \"& .MuiSvgIcon-root\": {\n      fill: \"#0a66c2\"\n    }\n\t},\n\tnotchedOutline: {\n    borderColor: '#0a66c2 !important'\n  },\n\tsubmit: {\n\t\tmargin: 3\n\t},\n\tcustomError: {\n\t\tcolor: 'red',\n\t\tfontSize: '0.8rem',\n\t\tmarginTop: 10\n\t},\n\tprogress: {\n\t\tposition: 'absolute'\n\t}\n}));\n\nfunction AddCollaborators() {\n\tconst { collaborators, setCollaborators, setIsCollaboratorsEdited } = useContext(DataAreaContext);\n  const [errors, setErrors] = useState({});\n\tconst classes = styles();\n\t\n\tconst inputFieldValues = [\n\t\t{\n\t\t\tname: \"email1\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"email1\",\n\t\t\trequired: false,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\thelperText: \"Enter the email of the person you want to add as a collaborator\"\n\t\t},\n\t\t{\n\t\t\tname: \"email2\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"email2\",\n\t\t\trequired: false,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\thelperText: \"Enter the email of the person you want to add as a collaborator\"\n\t\t},\n\t\t{\n\t\t\tname: \"email3\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"email3\",\n\t\t\trequired: false,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\thelperText: \"Enter the email of the person you want to add as a collaborator\"\n\t\t},\n\t\t{\n\t\t\tname: \"email4\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"email4\",\n\t\t\trequired: false,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\thelperText: \"Enter the email of the person you want to add as a collaborator\"\n\t\t},\n\t\t{\n\t\t\tname: \"email5\",\n\t\t\tlabel: \"\",\n\t\t\tid: \"email5\",\n\t\t\trequired: false,\n\t\t\tfullWidth: true,\n\t\t\tautoComplete: \"autoComplete\",\n\t\t\tautoFocus: false,\n\t\t\tdisabled: false,\n\t\t\ttype: \"\",\n\t\t\thelperText: \"Enter the email of the person you want to add as a collaborator\"\n\t\t}\n\t];\n\n  // Handles updating component state when the user types into the input field\n  const handleInputChange = (event) => {\n\t\tevent.preventDefault();\n    const { name, value } = event.target;\n\t\tlet isUpdated;\n\n\t\tisUpdated = collaborators.collaborators.filter((object) => {\n\t\t\tif (object.hasOwnProperty(name)) {\n\t\t\t\tobject[name] = value;\n\t\t\t\tobject[\"dateUpdated\"] = moment().format();\n\t\t\t\treturn object;\n\t\t\t}\n\t\t})\n\n\t\tif (isEmpty(isUpdated)) {\n\t\t\tcollaborators.collaborators.push({\n\t\t\t\t\"dateAdded\": moment().format(),\n\t\t\t\t\"dateUpdated\": moment().format(),\n\t\t\t\t[name]: value,\n\t\t\t\t\"userId\": \"\"\n\t\t\t})\n\t\t}\n\n    setCollaborators(JSON.parse(JSON.stringify({...collaborators})));\n\t\tsetIsCollaboratorsEdited(false);\n  };\n\n\treturn (\n\t\t<>\n\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t<CssBaseline />\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<form className={classes.form} noValidate>\n\t\t\t\t\t{inputFieldValues.map((inputFieldValue, i) => {\n\t\t\t\t\t\tlet emailKey = \"email\" + (i+1);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\trequired={inputFieldValue.required}\n\t\t\t\t\t\t\t\tvalue={collaborators.collaborators[i] !== undefined ? collaborators.collaborators[i][emailKey] : \"\"}\n\t\t\t\t\t\t\t\tfullWidth={inputFieldValue.fullWidth}\n\t\t\t\t\t\t\t\tid={inputFieldValue.id}\n\t\t\t\t\t\t\t\tlabel={inputFieldValue.label}\n\t\t\t\t\t\t\t\tname={inputFieldValue.name}\n\t\t\t\t\t\t\t\ttype={inputFieldValue.type}\n\t\t\t\t\t\t\t\tdisabled={inputFieldValue.disabled}\n\t\t\t\t\t\t\t\terror={errors[inputFieldValue.name]}\n\t\t\t\t\t\t\t\tautoComplete={inputFieldValue.autoComplete}\n\t\t\t\t\t\t\t\tautoFocus={inputFieldValue.autoFocus}\n\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\thelperText={inputFieldValue.helperText}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</Container>\n\t\t</>\n\t);\n}\n\nexport default AddCollaborators;","/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/SkeletonBuildingBlocks/SkeletonBuildingBlocks.tsx",[],["227","228"],"/Users/darren.behan/Documents/GitHub/inter-club-golf-live/client/src/components/Modals/ReauthenticateUserModal/index.js",["229"],"import React, { useContext, useState } from 'react';\nimport DataAreaContext from '../../../utils/DataAreaContext';\nimport LocalStorage from '../../../services/LocalStorage/LocalStorage.service';\nimport { Button, Modal, Form, Spinner, CloseButton } from 'react-bootstrap';\nimport 'moment-timezone';\nimport { EmailAuthProvider, reauthenticateWithCredential } from 'firebase/auth';\n\nfunction ReauthenticateUserModal(props) {\n  const {\n    loginDataObj,\n    setLoginDataObj,\n    userAuthResponse,\n    setIsAuthenticated,\n    setUserDataObj,\n    setUserAuthResponse,\n    userDataObj,\n  } = useContext(DataAreaContext);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClose = () => {\n    setIsLoading(false);\n    setUserAuthResponse({});\n    setUserDataObj({});\n    setIsAuthenticated(false);\n    props.setReauthenticateUserModalShow(false);\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    setLoginDataObj({ ...loginDataObj, [name]: value });\n  };\n\n  const handleReauthenticationSubmit = (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    const credential = EmailAuthProvider.credential(loginDataObj.email, loginDataObj.password);\n    reauthenticateWithCredential(props.user, credential)\n      .then((response) => {\n        setIsAuthenticated(true);\n        setUserDataObj(response.user);\n        LocalStorage.set('AuthToken', `Bearer ${response.user.stsTokenManager.accessToken}`);\n        setIsLoading(false);\n        setLoginDataObj({});\n        setUserAuthResponse({\n          message: 'You have successfully logged in. Click the close button so you can reset your password.',\n          status: 200,\n        });\n      })\n      .catch((error) => {\n        setUserAuthResponse({\n          message: error.message,\n          status: 400,\n        });\n        setLoginDataObj({});\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <Modal {...props} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          {userAuthResponse.status === 200 ? (\n            <Modal.Title id=\"contained-modal-title-vcenter\">Successfully reauthenticated</Modal.Title>\n          ) : (\n            <>\n              <Modal.Title id=\"contained-modal-title-vcenter\">\n                We need you to reauthenticate by logging in again in order to update your password\n              </Modal.Title>\n            </>\n          )}\n          <CloseButton onClick={handleClose} />\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            {userAuthResponse.status === 200 ? (\n              <Form.Text id=\"passwordHelpBlock\" className=\"mb-2\" style={{ color: '#50C878' }}>\n                {userAuthResponse.message}\n              </Form.Text>\n            ) : (\n              <>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={handleInputChange} />\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={handleInputChange} />\n                </Form.Group>\n              </>\n            )}\n            {userAuthResponse.status === 400 ? (\n              <Form.Text id=\"passwordHelpBlock\" style={{ color: '#EE4B2B' }}>\n                {userAuthResponse.message}\n              </Form.Text>\n            ) : null}\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          {userAuthResponse.status === 200 ? (\n            <Button onClick={() => props.setReauthenticateUserModalShow(false)} variant=\"outline-success\">\n              Close\n            </Button>\n          ) : (\n            <Button onClick={(e) => handleReauthenticationSubmit(e)} variant=\"outline-success\">\n              {isLoading ? <Spinner animation=\"border\" style={{ color: '#0a66c2' }} /> : 'Login'}\n            </Button>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ReauthenticateUserModal;\n",{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":10,"column":8,"nodeType":"236","messageId":"237","endLine":10,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":24,"column":34,"nodeType":"240","messageId":"241","endLine":24,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":59,"column":5,"nodeType":"244","endLine":59,"endColumn":22,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"246","line":44,"column":6,"nodeType":"244","endLine":44,"endColumn":8,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"248","line":59,"column":36,"nodeType":"249","endLine":61,"endColumn":7},{"ruleId":"242","severity":1,"message":"248","line":84,"column":38,"nodeType":"244","endLine":84,"endColumn":40},{"ruleId":"234","severity":1,"message":"250","line":106,"column":9,"nodeType":"236","messageId":"237","endLine":106,"endColumn":21},{"ruleId":"238","severity":1,"message":"251","line":165,"column":66,"nodeType":"240","messageId":"252","endLine":165,"endColumn":68},{"ruleId":"242","severity":1,"message":"253","line":34,"column":6,"nodeType":"244","endLine":34,"endColumn":8,"suggestions":"254"},{"ruleId":"238","severity":1,"message":"251","line":325,"column":56,"nodeType":"240","messageId":"252","endLine":325,"endColumn":58},{"ruleId":"255","severity":1,"message":"256","line":1,"column":1,"nodeType":"257","endLine":43,"endColumn":2},{"ruleId":"258","severity":1,"message":"259","line":117,"column":34,"nodeType":"260","messageId":"261","endLine":117,"endColumn":35,"suggestions":"262"},{"ruleId":"258","severity":1,"message":"259","line":117,"column":59,"nodeType":"260","messageId":"261","endLine":117,"endColumn":60,"suggestions":"263"},{"ruleId":"234","severity":1,"message":"264","line":226,"column":18,"nodeType":"236","messageId":"237","endLine":226,"endColumn":27},{"ruleId":"242","severity":1,"message":"265","line":233,"column":6,"nodeType":"244","endLine":233,"endColumn":8,"suggestions":"266"},{"ruleId":"242","severity":1,"message":"267","line":237,"column":6,"nodeType":"244","endLine":237,"endColumn":20,"suggestions":"268"},{"ruleId":"238","severity":1,"message":"269","line":252,"column":15,"nodeType":"270","messageId":"252","endLine":252,"endColumn":23},{"ruleId":"238","severity":1,"message":"271","line":332,"column":20,"nodeType":"270","messageId":"241","endLine":332,"endColumn":28},{"ruleId":"272","severity":1,"message":"273","line":347,"column":4,"nodeType":"274","messageId":"275","endLine":507,"endColumn":5},{"ruleId":"242","severity":1,"message":"276","line":19,"column":6,"nodeType":"244","endLine":19,"endColumn":8,"suggestions":"277"},{"ruleId":"255","severity":1,"message":"256","line":1,"column":1,"nodeType":"257","endLine":14,"endColumn":2},{"ruleId":"255","severity":1,"message":"256","line":1,"column":1,"nodeType":"257","endLine":10,"endColumn":2},{"ruleId":"230","replacedBy":"278"},{"ruleId":"232","replacedBy":"279"},{"ruleId":"234","severity":1,"message":"280","line":9,"column":18,"nodeType":"236","messageId":"237","endLine":9,"endColumn":28},{"ruleId":"234","severity":1,"message":"281","line":56,"column":10,"nodeType":"236","messageId":"237","endLine":56,"endColumn":16},{"ruleId":"234","severity":1,"message":"264","line":64,"column":18,"nodeType":"236","messageId":"237","endLine":64,"endColumn":27},{"ruleId":"242","severity":1,"message":"282","line":69,"column":6,"nodeType":"244","endLine":69,"endColumn":22,"suggestions":"283"},{"ruleId":"238","severity":1,"message":"284","line":266,"column":15,"nodeType":"270","messageId":"241","endLine":266,"endColumn":23},{"ruleId":"238","severity":1,"message":"251","line":321,"column":50,"nodeType":"240","messageId":"252","endLine":321,"endColumn":52},{"ruleId":"285","severity":1,"message":"286","line":323,"column":15,"nodeType":"287","messageId":"288","endLine":323,"endColumn":17},{"ruleId":"272","severity":1,"message":"273","line":373,"column":4,"nodeType":"274","messageId":"275","endLine":656,"endColumn":5},{"ruleId":"242","severity":1,"message":"289","line":39,"column":6,"nodeType":"244","endLine":39,"endColumn":8,"suggestions":"290"},{"ruleId":"238","severity":1,"message":"291","line":118,"column":62,"nodeType":"240","messageId":"252","endLine":118,"endColumn":64},{"ruleId":"238","severity":1,"message":"291","line":134,"column":62,"nodeType":"240","messageId":"252","endLine":134,"endColumn":64},{"ruleId":"238","severity":1,"message":"291","line":153,"column":62,"nodeType":"240","messageId":"252","endLine":153,"endColumn":64},{"ruleId":"238","severity":1,"message":"269","line":230,"column":27,"nodeType":"270","messageId":"252","endLine":230,"endColumn":35},{"ruleId":"238","severity":1,"message":"269","line":344,"column":37,"nodeType":"270","messageId":"252","endLine":344,"endColumn":45},{"ruleId":"238","severity":1,"message":"284","line":30,"column":22,"nodeType":"270","messageId":"241","endLine":30,"endColumn":30},{"ruleId":"242","severity":1,"message":"292","line":27,"column":6,"nodeType":"244","endLine":27,"endColumn":8,"suggestions":"293"},{"ruleId":"238","severity":1,"message":"294","line":38,"column":42,"nodeType":"270","messageId":"252","endLine":38,"endColumn":50},{"ruleId":"238","severity":1,"message":"291","line":48,"column":50,"nodeType":"240","messageId":"252","endLine":48,"endColumn":52},{"ruleId":"238","severity":1,"message":"291","line":105,"column":61,"nodeType":"240","messageId":"252","endLine":105,"endColumn":63},{"ruleId":"238","severity":1,"message":"291","line":155,"column":69,"nodeType":"240","messageId":"252","endLine":155,"endColumn":71},{"ruleId":"238","severity":1,"message":"291","line":169,"column":70,"nodeType":"240","messageId":"252","endLine":169,"endColumn":72},{"ruleId":"238","severity":1,"message":"291","line":189,"column":73,"nodeType":"240","messageId":"252","endLine":189,"endColumn":75},{"ruleId":"238","severity":1,"message":"291","line":196,"column":73,"nodeType":"240","messageId":"252","endLine":196,"endColumn":75},{"ruleId":"238","severity":1,"message":"269","line":321,"column":33,"nodeType":"270","messageId":"252","endLine":321,"endColumn":41},{"ruleId":"238","severity":1,"message":"269","line":337,"column":41,"nodeType":"270","messageId":"252","endLine":337,"endColumn":49},{"ruleId":"238","severity":1,"message":"269","line":353,"column":40,"nodeType":"270","messageId":"252","endLine":353,"endColumn":48},{"ruleId":"238","severity":1,"message":"269","line":369,"column":38,"nodeType":"270","messageId":"252","endLine":369,"endColumn":46},{"ruleId":"242","severity":1,"message":"295","line":19,"column":6,"nodeType":"244","endLine":19,"endColumn":8,"suggestions":"296"},{"ruleId":"238","severity":1,"message":"291","line":41,"column":80,"nodeType":"240","messageId":"252","endLine":41,"endColumn":82},{"ruleId":"238","severity":1,"message":"297","line":54,"column":50,"nodeType":"240","messageId":"241","endLine":54,"endColumn":52},{"ruleId":"238","severity":1,"message":"297","line":56,"column":50,"nodeType":"240","messageId":"241","endLine":56,"endColumn":52},{"ruleId":"238","severity":1,"message":"297","line":63,"column":53,"nodeType":"240","messageId":"241","endLine":63,"endColumn":55},{"ruleId":"234","severity":1,"message":"298","line":1,"column":39,"nodeType":"236","messageId":"237","endLine":1,"endColumn":48},{"ruleId":"234","severity":1,"message":"264","line":58,"column":18,"nodeType":"236","messageId":"237","endLine":58,"endColumn":27},{"ruleId":"238","severity":1,"message":"291","line":130,"column":59,"nodeType":"240","messageId":"252","endLine":130,"endColumn":61},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"299","line":16,"column":5,"nodeType":"236","messageId":"237","endLine":16,"endColumn":16},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"no-unused-vars","'AdSense' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["302"],"React Hook useEffect has missing dependencies: 'setFilterValue' and 'userDataObj.uid'. Either include them or remove the dependency array.",["303"],"Assignments to the 'sortedMatchesByMatchDateTime' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'LoadingBlock' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'getMatchOnLoad', 'match', and 'setUpdateMatchObj'. Either include them or remove the dependency array.",["304"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["305","306"],["307","308"],"'setErrors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPostMatchObj'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'setOldPostMatchObj'. Either include it or remove the dependency array.",["310"],"Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","Array.prototype.filter() expects a return value from function.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'match', 'setOldUpdateMatchObj', and 'setUpdateMatchObj'. Either include them or remove the dependency array.",["311"],["300"],["301"],"'faGolfBall' is defined but never used.","'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setOldUpdateMatchObj'. Either include it or remove the dependency array.",["312"],"Array.prototype.map() expects a return value from function.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getMatchesByCompetition', 'setFilterValue', and 'setMatchesByCompetition'. Either include them or remove the dependency array.",["313"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","React Hook useEffect has a missing dependency: 'setFilterValue'. Either include it or remove the dependency array.",["314"],"Array.prototype.filter() expects a value to be returned at the end of function.","React Hook useEffect has missing dependencies: 'match' and 'setCollaborators'. Either include them or remove the dependency array.",["315"],"Array.prototype.filter() expects a return value from arrow function.","'useEffect' is defined but never used.","'userDataObj' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"messageId":"322","fix":"323","desc":"324"},{"messageId":"325","fix":"326","desc":"327"},{"messageId":"322","fix":"328","desc":"324"},{"messageId":"325","fix":"329","desc":"327"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"344","text":"345"},"Update the dependencies array to be: [setFilterValue, userDataObj.uid]",{"range":"346","text":"347"},"Update the dependencies array to be: [getMatchOnLoad, match, setUpdateMatchObj]",{"range":"348","text":"349"},"removeEscape",{"range":"350","text":"351"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"352","text":"353"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"354","text":"351"},{"range":"355","text":"353"},"Update the dependencies array to be: [setPostMatchObj]",{"range":"356","text":"357"},"Update the dependencies array to be: [postMatchObj, setOldPostMatchObj]",{"range":"358","text":"359"},"Update the dependencies array to be: [match, setOldUpdateMatchObj, setUpdateMatchObj]",{"range":"360","text":"361"},"Update the dependencies array to be: [setOldUpdateMatchObj, updateMatchObj]",{"range":"362","text":"363"},"Update the dependencies array to be: [getMatchesByCompetition, setFilterValue, setMatchesByCompetition]",{"range":"364","text":"365"},"Update the dependencies array to be: [setFilterValue]",{"range":"366","text":"367"},"Update the dependencies array to be: [match, setCollaborators]",{"range":"368","text":"369"},[1802,1819],"[history, isAuthenticated]",[1887,1889],"[setFilterValue, userDataObj.uid]",[1560,1562],"[getMatchOnLoad, match, setUpdateMatchObj]",[2732,2733],"",[2732,2732],"\\",[2757,2758],[2757,2757],[4972,4974],"[setPostMatchObj]",[5046,5060],"[postMatchObj, setOldPostMatchObj]",[931,933],"[match, setOldUpdateMatchObj, setUpdateMatchObj]",[1800,1816],"[setOldUpdateMatchObj, updateMatchObj]",[1545,1547],"[getMatchesByCompetition, setFilterValue, setMatchesByCompetition]",[825,827],"[setFilterValue]",[986,988],"[match, setCollaborators]"]